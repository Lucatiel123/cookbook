<?xml version="1.0"?>
<rss version="2.0" xmlns:dc="http://purl.org/dc/elements/1.1/">

<channel>
	<title>Planet Python</title>
	<link>http://planetpython.org/</link>
	<language>en</language>
	<description>Planet Python - http://planetpython.org/</description>

<item>
	<title>Zato Blog: Zato and Docker installation options - general overview</title>
	<guid>https://zato.io/blog/2020-08-10-zato-docker.html</guid>
	<link>https://zato.io/blog/2020-08-10-zato-docker.html</link>
	<description>Docker is a containerization platform that gained immense popularity in the IT world as a tool that can contain an application and help to deploy it to multiple environments.
History Before Docker, there were different approaches whose goal was to obtain a reliable development and deployment process, which means testing and putting the application into production as a reproducible unit where the same result is always achieved.
The leading way to isolate and organize applications along with their their dependencies was to place each and every application in its own virtual machine.</description>
	<pubDate>Mon, 24 Aug 2020 12:51:55 +0000</pubDate>
</item>
<item>
	<title>PSF GSoC students blogs: Weekly Check-In: Week 13</title>
	<guid>https://blogs.python-gsoc.org/en/lenixlobos-blog/weekly-check-in-week-13/</guid>
	<link>https://blogs.python-gsoc.org/en/lenixlobos-blog/weekly-check-in-week-13/</link>
	<description>&lt;p&gt;&lt;br /&gt;
Make sure to check out Project FURY : &lt;a href=&quot;https://github.com/fury-gl/fury&quot;&gt;https://github.com/fury-gl/fury&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Hey Everyone! &lt;br /&gt;
Today marked the official end of the coding period for Google Summer of Code 2020. On this day i would like to take the opportunity to thank all my mentors and Soham who have shown immense support during this time and helped me grow not only to be a better programmer but also to be a better team member. While the GSoC period ends, i will try my best to be active and contribute to the project and help it grow.&lt;br /&gt;
Cheers!&lt;/p&gt;

&lt;h2&gt;&lt;b&gt;What did I do this week&lt;/b&gt;&lt;/h2&gt;

&lt;p&gt;This being the final week of GSoC , my task was to create a PR which showcases not only the shader capabilities of the project but also to create a example which integrates both the UI and shader system of project FURY. This example can help new users to get familiar with both the UI and shaders.&lt;br /&gt;
Apart from this i also worked on a Toon Shader.&lt;/p&gt;

&lt;p&gt;The output for the above task is given below:&lt;br /&gt;
 &lt;/p&gt;

&lt;p&gt;&lt;img alt=&quot;&quot; src=&quot;https://blogs.python-gsoc.org/media/uploads/6c73d86a-b971-4602-86cb-d9e4fc4cef57.gif&quot; /&gt;&lt;/p&gt;

&lt;p&gt; &lt;/p&gt;

&lt;p&gt; &lt;/p&gt;

&lt;p&gt; &lt;/p&gt;

&lt;p&gt; &lt;/p&gt;

&lt;h2&gt;&lt;b&gt;What's coming up next&lt;/b&gt;&lt;/h2&gt;

&lt;p&gt;The next week i will work on the final GSoC documentation which explains what i worked on throughout the GSoC period.In case of any changes are requested by the mentors I will also try to implement them. &lt;/p&gt;

&lt;h2&gt;&lt;b&gt;Did I get stuck anywhere&lt;/b&gt;&lt;/h2&gt;

&lt;p&gt;With the help of Soham and the mentors this week went smoothly.&lt;/p&gt;</description>
	<pubDate>Mon, 24 Aug 2020 10:22:32 +0000</pubDate>
</item>
<item>
	<title>EuroPython: EuroPython 2020: Merch Shop Discount</title>
	<guid>https://blog.europython.eu/post/627317569142013952</guid>
	<link>https://blog.europython.eu/post/627317569142013952</link>
	<description>&lt;p&gt;We have setup another 10 day 15% discount period in our merch shop, from today until Sept 1.&lt;/p&gt;&lt;img src=&quot;https://64.media.tumblr.com/2992878dd4af6ad44e944079742323cb/e5770b563054707b-3d/s540x810/c162706eb2d118b271c6a3485b9baba7e78e0af2.png&quot; alt=&quot;image&quot; /&gt;&lt;p class=&quot;center&quot;&gt;&lt;b&gt;&lt;a href=&quot;https://ep2020.europython.eu/europython/europython-merchandise-shop/&quot; target=&quot;_blank&quot;&gt;EuroPython Merch Shop&lt;/a&gt;&lt;/b&gt;&lt;/p&gt;&lt;p&gt;After the success of the shop for EuroPython 2020, we intend to keep the merch shop also for future EuroPython conferences.&lt;/p&gt;&lt;p&gt;

Enjoy,&lt;br /&gt;–&lt;br /&gt;&lt;a href=&quot;https://ep2020.europython.eu/europython/team/&quot; target=&quot;_blank&quot;&gt;EuroPython 2020 Team&lt;/a&gt;&lt;br /&gt;&lt;a href=&quot;https://ep2020.europython.eu/&quot; target=&quot;_blank&quot;&gt;https://ep2020.europython.eu/&lt;/a&gt;&lt;br /&gt;&lt;a href=&quot;https://www.europython-society.org/&quot; target=&quot;_blank&quot;&gt;https://www.europython-society.org/&lt;/a&gt; 

&lt;br /&gt;&lt;/p&gt;</description>
	<pubDate>Mon, 24 Aug 2020 08:10:53 +0000</pubDate>
</item>
<item>
	<title>Test and Code: 127: WFH, WTF? - Tips and Tricks for Working From Home - Reuven Lerner &amp;amp; Julian Sequeira</title>
	<guid>https://testandcode.com/127</guid>
	<link>https://testandcode.com/127</link>
	<description>&lt;p&gt;Many people have been working from home now that are not used to working from home.&lt;br /&gt;
Or at least are working from home more than they ever did before. That's definitely true for me.&lt;br /&gt;
Even though I've been working from home since March, I wanted some tips from people who have been doing it longer.&lt;/p&gt;

&lt;p&gt;Julian Sequeira, of PyBites fame, has been working from home for about a year.&lt;br /&gt;
Reuven Lerner, an amazing Python trainer, has been working from home for much longer.&lt;/p&gt;

&lt;p&gt;We originally had a big list of WFH topics. But we had so much fun with the tips and tricks part, that that's pretty much the whole episode.&lt;/p&gt;

&lt;p&gt;But there's lots of great tips and tricks, so I'm glad we focused on that.&lt;/p&gt;&lt;p&gt;Special Guests: Julian Sequeira and Reuven Lerner.&lt;/p&gt;&lt;p&gt;Sponsored By:&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;a href=&quot;https://talkpython.fm/test&quot; rel=&quot;nofollow&quot;&gt;Talk Python Training&lt;/a&gt;: &lt;a href=&quot;https://talkpython.fm/test&quot; rel=&quot;nofollow&quot;&gt;Online video courses for Python developers&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;https://testandcode.com/datadog&quot; rel=&quot;nofollow&quot;&gt;Datadog&lt;/a&gt;: &lt;a href=&quot;https://testandcode.com/datadog&quot; rel=&quot;nofollow&quot;&gt;Modern monitoring &amp;amp; security. See inside any stack, any app, at any scale, anywhere. 
Visit testandcode.com/datadog to get started.&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;&lt;a href=&quot;https://www.patreon.com/testpodcast&quot; rel=&quot;payment&quot;&gt;Support Test &amp;amp; Code :  Python Testing for Software Engineering&lt;/a&gt;&lt;/p&gt;&lt;p&gt;Links:&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;a href=&quot;https://pybit.es/&quot; title=&quot;PyBites&quot; rel=&quot;nofollow&quot;&gt;PyBites&lt;/a&gt; &amp;mdash; Julian's site for teaching Python&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;https://lerner.co.il/&quot; title=&quot;Teaching Python and data science around the world — Reuven Lerner&quot; rel=&quot;nofollow&quot;&gt;Teaching Python and data science around the world — Reuven Lerner&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/Bonbon&quot; title=&quot;Bonbon - Wikipedia&quot; rel=&quot;nofollow&quot;&gt;Bonbon - Wikipedia&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;https://us5.list-manage.com/subscribe?u=1f123c581ab0df2737f3174b9&amp;id=9db722df54&quot; title=&quot;Test &amp; Code Mailing List&quot; rel=&quot;nofollow&quot;&gt;Test &amp;amp; Code Mailing List&lt;/a&gt; &amp;mdash; Join for your chance to win a free course from Talk Python Training. One course given away every week for 6 weeks.&lt;/li&gt;&lt;/ul&gt;&amp;lt;p&amp;gt;Many people have been working from home now that are not used to working from home.&amp;lt;br&amp;gt;
Or at least are working from home more than they ever did before. That&amp;amp;#39;s definitely true for me.&amp;lt;br&amp;gt;
Even though I&amp;amp;#39;ve been working from home since March, I wanted some tips from people who have been doing it longer.&amp;lt;/p&amp;gt;

&amp;lt;p&amp;gt;Julian Sequeira, of PyBites fame, has been working from home for about a year.&amp;lt;br&amp;gt;
Reuven Lerner, an amazing Python trainer, has been working from home for much longer.&amp;lt;/p&amp;gt;

&amp;lt;p&amp;gt;We originally had a big list of WFH topics. But we had so much fun with the tips and tricks part, that that&amp;amp;#39;s pretty much the whole episode.&amp;lt;/p&amp;gt;

&amp;lt;p&amp;gt;But there&amp;amp;#39;s lots of great tips and tricks, so I&amp;amp;#39;m glad we focused on that.&amp;lt;/p&amp;gt;&amp;lt;p&amp;gt;Special Guests: Julian Sequeira and Reuven Lerner.&amp;lt;/p&amp;gt;&amp;lt;p&amp;gt;Sponsored By:&amp;lt;/p&amp;gt;&amp;lt;ul&amp;gt;&amp;lt;li&amp;gt;&amp;lt;a href=&quot;https://talkpython.fm/test&quot; rel=&quot;nofollow&quot;&amp;gt;Talk Python Training&amp;lt;/a&amp;gt;: &amp;lt;a href=&quot;https://talkpython.fm/test&quot; rel=&quot;nofollow&quot;&amp;gt;Online video courses for Python developers&amp;lt;/a&amp;gt;&amp;lt;/li&amp;gt;&amp;lt;li&amp;gt;&amp;lt;a href=&quot;https://testandcode.com/datadog&quot; rel=&quot;nofollow&quot;&amp;gt;Datadog&amp;lt;/a&amp;gt;: &amp;lt;a href=&quot;https://testandcode.com/datadog&quot; rel=&quot;nofollow&quot;&amp;gt;Modern monitoring &amp;amp; security. See inside any stack, any app, at any scale, anywhere. 
Visit testandcode.com/datadog to get started.&amp;lt;/a&amp;gt;&amp;lt;/li&amp;gt;&amp;lt;/ul&amp;gt;&amp;lt;p&amp;gt;&amp;lt;a href=&quot;https://www.patreon.com/testpodcast&quot; rel=&quot;payment&quot;&amp;gt;Support Test &amp;amp; Code :  Python Testing for Software Engineering&amp;lt;/a&amp;gt;&amp;lt;/p&amp;gt;&amp;lt;p&amp;gt;Links:&amp;lt;/p&amp;gt;&amp;lt;ul&amp;gt;&amp;lt;li&amp;gt;&amp;lt;a href=&quot;https://pybit.es/&quot; title=&quot;PyBites&quot; rel=&quot;nofollow&quot;&amp;gt;PyBites&amp;lt;/a&amp;gt; &amp;amp;mdash; Julian's site for teaching Python&amp;lt;/li&amp;gt;&amp;lt;li&amp;gt;&amp;lt;a href=&quot;https://lerner.co.il/&quot; title=&quot;Teaching Python and data science around the world — Reuven Lerner&quot; rel=&quot;nofollow&quot;&amp;gt;Teaching Python and data science around the world — Reuven Lerner&amp;lt;/a&amp;gt;&amp;lt;/li&amp;gt;&amp;lt;li&amp;gt;&amp;lt;a href=&quot;https://en.wikipedia.org/wiki/Bonbon&quot; title=&quot;Bonbon - Wikipedia&quot; rel=&quot;nofollow&quot;&amp;gt;Bonbon - Wikipedia&amp;lt;/a&amp;gt;&amp;lt;/li&amp;gt;&amp;lt;li&amp;gt;&amp;lt;a href=&quot;https://us5.list-manage.com/subscribe?u=1f123c581ab0df2737f3174b9&amp;amp;id=9db722df54&quot; title=&quot;Test &amp;amp; Code Mailing List&quot; rel=&quot;nofollow&quot;&amp;gt;Test &amp;amp; Code Mailing List&amp;lt;/a&amp;gt; &amp;amp;mdash; Join for your chance to win a free course from Talk Python Training. One course given away every week for 6 weeks.&amp;lt;/li&amp;gt;&amp;lt;/ul&amp;gt;</description>
	<pubDate>Mon, 24 Aug 2020 07:45:00 +0000</pubDate>
</item>
<item>
	<title>PSF GSoC students blogs: Week 12 : All Done!</title>
	<guid>https://blogs.python-gsoc.org/en/aryan_guptas-blog/week-12-all-done/</guid>
	<link>https://blogs.python-gsoc.org/en/aryan_guptas-blog/week-12-all-done/</link>
	<description>&lt;p&gt;Hello there! This was the final week of coding in GSoC 2020. Three months back, I had no confidence that I would be able to do the project. And here we are! &lt;/p&gt;

&lt;p&gt;&lt;u&gt;&lt;strong&gt;What did you do this week?&lt;/strong&gt;&lt;/u&gt;&lt;/p&gt;

&lt;p&gt;I spent the week writing tests for KML Overlay. I wrote tests for Automated Button clicks, checking if a feature has been plotted on the map or not, the linewidth and colour of the files. It was a long arduous process, but I'm glad I was able to complete it :))&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;u&gt;What will I do next week?&lt;/u&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Not much, I guess :p &lt;/p&gt;

&lt;p&gt;I will work on the documentation and the formalities left to submit my work for Evaluation. I think thats all!&lt;/p&gt;

&lt;p&gt;&lt;u&gt;&lt;strong&gt;Did you get stuck anywhere?&lt;/strong&gt;&lt;/u&gt;&lt;/p&gt;

&lt;p&gt;This week was all about writing Tests. I hate writing tests. They are counter - intuitive, and almost half of the tests seem inconsequential. I do realise its importance, but I need to vent as there is so little clear documentation about Pytest, PyQt and mocking. I spent a lot of time trying to automate clicks, which should have been a much easier process. &lt;/p&gt;

&lt;p&gt; &lt;/p&gt;

&lt;p&gt;I am really happy with the way things turned out. From a shy, hesitant person, afraid of bombing up softwares, I have become a much more confident amateur coder who has started enjoying &quot; not knowing everything&quot; and learning on the go. I would like to thank my mentors Joern Ungermann, Reimar Bauer and Christian Rolf for all their guidance and encouragement. I wouldn't have been able to accomplish so much without their support. I would also like to thank my GSoC mate Tanish, who helped me out with my dumb &quot;git&quot; doubts :)) And thanks to the Open Source Community and GSoC for giving me this opportunity to grow!&lt;/p&gt;

&lt;p&gt;Bye!&lt;/p&gt;

&lt;p&gt; &lt;/p&gt;</description>
	<pubDate>Mon, 24 Aug 2020 07:43:01 +0000</pubDate>
</item>
<item>
	<title>PSF GSoC students blogs: GSoC: Week #13</title>
	<guid>https://blogs.python-gsoc.org/en/anandbaburajans-blog/gsoc-week-13/</guid>
	<link>https://blogs.python-gsoc.org/en/anandbaburajans-blog/gsoc-week-13/</link>
	<description>&lt;p&gt;Hello!&lt;/p&gt;

&lt;p&gt;&lt;b&gt;What did you do this week?&lt;/b&gt;&lt;/p&gt;

&lt;p&gt;I worked on a recursive function which splits tile_slices in order to properly read from reshaped HDF5 files. Now the scan dimensions can be reshaped for n-D HDF5 data!! But there’s a bug to be fixed before the detector dimensions can be reshaped. Splitting tiles was much faster than reading each frames using their indices. I also improved the coordinates generation by making it a cached property and I fixed some bugs in the RAW and EMPAD dataset to fix the errors thrown while specifying a shape larger than their image_count.&lt;/p&gt;

&lt;p&gt;&lt;b&gt;What is coming up next?&lt;/b&gt;&lt;/p&gt;

&lt;p&gt;I’m working on HDF5’s sig_shape reshaping and sync_offset. K2IS’ sync_flag is still WIP. A few changes need to be done on the client side to handle the deprecation of ‘scan_size’ and ‘detector_size’. I’ll update the docs as well.&lt;/p&gt;

&lt;p&gt;&lt;b&gt;Did you get stuck anywhere?&lt;/b&gt;&lt;/p&gt;

&lt;p&gt;No.&lt;/p&gt;</description>
	<pubDate>Mon, 24 Aug 2020 06:54:42 +0000</pubDate>
</item>
<item>
	<title>Zato Blog: Installing Zato under Mac</title>
	<guid>https://zato.io/blog/2020-08-24-mac-installation.html</guid>
	<link>https://zato.io/blog/2020-08-24-mac-installation.html</link>
	<description>The next Zato release will offer a native Mac installer while for now an installation from source is needed - read on for details on how to set up Zato today using Homebrew.
The fundamental idea behind supporting non-Linux environments is that of making it easier for developers to work on their API services before the code is shipped to Linux test and production environments. That is, Linux is the final destination for code but that should not prevent one from using a non-Linux system during development.</description>
	<pubDate>Mon, 24 Aug 2020 06:15:14 +0000</pubDate>
</item>
<item>
	<title>Mike Driscoll: PyDev of the Week: Ethan Smith</title>
	<guid>https://www.blog.pythonlibrary.org/2020/08/24/pydev-of-the-week-ethan-smith/</guid>
	<link>https://www.blog.pythonlibrary.org/2020/08/24/pydev-of-the-week-ethan-smith/</link>
	<description>&lt;p&gt;This week we welcome Ethan Smith (&lt;a href=&quot;https://twitter.com/ethanhs&quot; rel=&quot;noopener noreferrer&quot; target=&quot;_blank&quot;&gt;@ethanhs&lt;/a&gt;) as our PyDev of the Week! Ethan is a core developer of the &lt;a href=&quot;https://mypy.readthedocs.io/en/stable/&quot; rel=&quot;noopener noreferrer&quot; target=&quot;_blank&quot;&gt;Mypy project&lt;/a&gt;, which is a static type checker for Python. You can see what other projects Ethan contributes to over on &lt;a href=&quot;https://github.com/ethanhs&quot; rel=&quot;noopener noreferrer&quot; target=&quot;_blank&quot;&gt;Github&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Let&amp;#8217;s spend a few moments getting to know Ethan better!&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Can you tell us a little about yourself (hobbies, education, etc):&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;I was born and live in the San Francisco Bay Area. I am currently an undergraduate at UC Berkeley pursuing a degree in Electrical Engineering and Computer Science. I’m passionate about Linux and free software, so I am a staff member of the Open Computing Facility, a campus organization that provides computing services to students based on free software. Programming language design and quantum computing are the two areas I am most interested in. I have been working on mypy for about 3 years now, and it has been a great experience working with the mypy team. I also experiment with toy programming languages from time to time.&lt;/p&gt;
&lt;p&gt;I currently work at Lawrence Berkeley National Lab as part of the Advanced Quantum Testbed doing quantum computing research. I develop tools to make it easier to program quantum computers.&lt;span id=&quot;more-9976&quot;&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Why did you start using Python?&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;I started using Python in high school, when I needed to use it as part of a summer internship at the Lawrence Hall of Science, a local museum. I was working with a fellow intern on an inventory system and we decided to write it in Python. The inventory system never saw the light of day, but it was enough to get me to fall in love with Python! I continued to learn Python the rest of that summer and never looked back! For a couple of years after that I used Python to make little projects for myself and to play with customizing Windows.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;What other programming languages do you know and which is your favorite?&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;I would say I am familiar with the bog standard C/C++/Java/C#/Ruby and a few others, such as Rust and Scheme. I have really fallen in love with Rust recently, and I know it is hyped a lot, but it is a joy to use once you get how to use it. I have yet to see a language mix clean high level semantics with blazing fast speed in the same way. In high school I used MIT’s Scratch to teach basic programming concepts to kids and I’ve always thought it was well designed.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;What projects are you working on now?&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;I largely have been working on a quantum compiler (which is actually a lot simpler than it sounds!). The &lt;a href=&quot;https://github.com/WolfLink/qsearch&quot; rel=&quot;noopener noreferrer&quot; target=&quot;_blank&quot;&gt;compiler&lt;/a&gt; produces minimal or near-minimal size quantum programs. Quantum computers suffer from high noise for each operation they perform, so reducing the number of operations to perform is critical! I’ve been using Rust to scale the compiler to work faster on larger and harder programs, which has been quite fun.&lt;/p&gt;
&lt;p&gt;I’ve also been experimenting with compiling Python to WebAssembly for deterministic computation. This has a lot of applications such as reproducible Jupyter Notebooks or enabling easier distributed computation.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Which Python libraries are your favorite (core or 3rd party)?&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;I’m going to cheat a little here and choose pyo3, which is actually a Rust library for binding Rust code to Python. One of the things I like most about Python is that you can write bindings to fast native code and enjoy the high level simplicity of Python. This approach has precedence in the likes of numpy and scipy. Since I’ve been enjoying writing Rust recently, pyo3 means I can use both of my favorite languages together!&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;How did you get involved with the Mypy project?&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;I started using mypy in 2016 when I was playing around with a personal project. My main development machine runs Windows and when I ran mypy it broke! I got familiar with how mypy worked and then I fixed the bug. I then decided I wanted to help out because it seemed like a fascinating project. So I started helping out by being a nuisance helping triage issues on the bug tracker and eventually fixing more bugs and implementing better analysis.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;What is your favorite feature of Mypy?&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;I really love the mypy daemon. I remember when I first ported it to run on Windows I was shocked at how much faster it was at checking larger projects. Porting it was a fun challenge since Windows doesn’t really support daemons the same way Unix does, but I digress. Looking ahead I’m excited for the implementation of PEP 612 https://www.python.org/dev/peps/pep-0612/, which will make typing decorators and higher order functions a lot easier.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Thanks for doing the interview, Ethan!&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;The post &lt;a rel=&quot;nofollow&quot; href=&quot;https://www.blog.pythonlibrary.org/2020/08/24/pydev-of-the-week-ethan-smith/&quot;&gt;PyDev of the Week: Ethan Smith&lt;/a&gt; appeared first on &lt;a rel=&quot;nofollow&quot; href=&quot;https://www.blog.pythonlibrary.org&quot;&gt;The Mouse Vs. The Python&lt;/a&gt;.&lt;/p&gt;</description>
	<pubDate>Mon, 24 Aug 2020 05:05:16 +0000</pubDate>
</item>
<item>
	<title>Glyph Lefkowitz: Nice Animations with Twisted and PyGame</title>
	<guid>https://glyph.twistedmatrix.com/2020/08/nice-animations-with-twisted-and-pygame.html</guid>
	<link>https://glyph.twistedmatrix.com/2020/08/nice-animations-with-twisted-and-pygame.html</link>
	<description>&lt;p&gt;&lt;img alt=&quot;&quot; src=&quot;https://glyph.twistedmatrix.com/images/sneks.png&quot; /&gt;&lt;/p&gt;
&lt;p&gt;One of my favorite features within Twisted — but also one of the least known —
is
&lt;a href=&quot;https://twistedmatrix.com/documents/20.3.0/api/twisted.internet.task.LoopingCall.html#withCount&quot;&gt;&lt;code&gt;LoopingCall.withCount&lt;/code&gt;&lt;/a&gt;,
which can be used in applications where you have some real-time thing
happening, which needs to &lt;em&gt;keep&lt;/em&gt; happening at a smooth rate regardless of any
concurrent activity or pauses in the main loop.  Originally designed for
playing audio samples from a softphone without introducing a desync delay over
time, it can also be used to play animations while keeping track of their
appropriate frame.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;LoopingCall&lt;/code&gt; is all around a fun tool to build little game features with.
I’ve built a quick little demo to showcase some discoveries I’ve made over a
few years of small hobby projects (none of which are ready for an open-source
release) over here: &lt;a href=&quot;https://github.com/glyph/DrawSnek&quot;&gt;DrawSnek&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;This little demo responds to 3 key-presses:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;code&gt;q&lt;/code&gt; quits. Always a useful thing for full-screen apps which don’t always
   play nice with C-c :).&lt;/li&gt;
&lt;li&gt;&lt;code&gt;s&lt;/code&gt; spawns an additional snek. Have fun, make many sneks.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;h&lt;/code&gt; introduces a random “hiccup” of up to 1 full second so you can see what
   happens visually when the loop is overburdened or stuck.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Unfortunately a fully-functioning demo is a bit lengthy to go over line by line
in a blog post, so I’ll just focus on a couple of important features for
stutter- and tearing-resistant animation &amp;amp; drawing with PyGame &amp;amp; Twisted.&lt;/p&gt;
&lt;p&gt;For starters, you’ll want to use a &lt;a href=&quot;https://pypi.org/project/pygame/2.0.0.dev10/&quot;&gt;very recent prerelease of PyGame
2&lt;/a&gt;, which &lt;a href=&quot;https://github.com/pygame/pygame/commit/274d4e46a6e417eb8f2f88ee90c208ed9d13eb98&quot;&gt;recently added
support&lt;/a&gt;
for &lt;a href=&quot;https://en.wikipedia.org/wiki/Screen_tearing#Vertical_synchronization&quot;&gt;vertical
sync&lt;/a&gt;
even without OpenGL mode; then, pass the &lt;code&gt;vsync=1&lt;/code&gt; argument to &lt;code&gt;set_mode&lt;/code&gt;:&lt;/p&gt;
&lt;table class=&quot;highlighttable&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;linenos&quot;&gt;&lt;div class=&quot;linenodiv&quot;&gt;&lt;pre&gt;1
2
3
4
5&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;screen&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pygame&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;display&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;set_mode&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;640&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;480&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;pygame&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;locals&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;SCALED&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pygame&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;locals&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;FULLSCREEN&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;vsync&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;

&lt;p&gt;To allow for as much wall-clock time as possible to handle non-drawing work,
such as AI and input handling, I also use this trick:&lt;/p&gt;
&lt;table class=&quot;highlighttable&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;linenos&quot;&gt;&lt;div class=&quot;linenodiv&quot;&gt;&lt;pre&gt;1
2
3
4
5
6
7&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;drawScene&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;():&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;screen&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;fill&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;drawable&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;drawables&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;drawable&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;draw&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;screen&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;deferToThread&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pygame&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;display&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;flip&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;LoopingCall&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;drawScene&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;start&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;/&lt;/span&gt; &lt;span class=&quot;mf&quot;&gt;62.0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;

&lt;p&gt;By deferring &lt;code&gt;pygame.display.flip&lt;/code&gt; to a thread&lt;sup id=&quot;fnref:1:nice-animations-with-twisted-and-pygame-2020-8&quot;&gt;&lt;a class=&quot;footnote-ref&quot; href=&quot;https://glyph.twistedmatrix.com/feeds/all.atom.xml#fn:1:nice-animations-with-twisted-and-pygame-2020-8&quot; id=&quot;fnref:1&quot;&gt;1&lt;/a&gt;&lt;/sup&gt;, the main loop can continue
processing AI timers, animation, network input, and user input while blocking
and waiting for the vertical blank.  Since the time-to-vblank can easily be up
to 1/120th of a second, this is a significant amount of time!  We know that the
&lt;code&gt;draw&lt;/code&gt; won’t overlap with &lt;code&gt;flip&lt;/code&gt;, because &lt;code&gt;LoopingCall&lt;/code&gt; respects &lt;code&gt;Deferred&lt;/code&gt;s
returned from its callable and won’t re-invoke you until the &lt;code&gt;Deferred&lt;/code&gt; fires.&lt;/p&gt;
&lt;p&gt;Drawing doesn’t use &lt;code&gt;withCount&lt;/code&gt;, because it just needs to repeat &lt;em&gt;about&lt;/em&gt; once
every refresh interval (on most displays, about 1/60th of a second); the vblank
timing is what makes sure it lines up.&lt;/p&gt;
&lt;p&gt;However, animation looks like this:&lt;/p&gt;
&lt;table class=&quot;highlighttable&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;linenos&quot;&gt;&lt;div class=&quot;linenodiv&quot;&gt;&lt;pre&gt;1
2
3&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;animate&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;frameCount&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
    &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;index&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;frameCount&lt;/span&gt;
    &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;index&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;%=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;len&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;images&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;

&lt;p&gt;We move the index forward by however many frames it’s been, then be sure it
wraps around by modding it by the number of frames.&lt;/p&gt;
&lt;p&gt;Similarly, the core&lt;sup id=&quot;fnref:2:nice-animations-with-twisted-and-pygame-2020-8&quot;&gt;&lt;a class=&quot;footnote-ref&quot; href=&quot;https://glyph.twistedmatrix.com/feeds/all.atom.xml#fn:2:nice-animations-with-twisted-and-pygame-2020-8&quot; id=&quot;fnref:2&quot;&gt;2&lt;/a&gt;&lt;/sup&gt; of movement looks like this:&lt;/p&gt;
&lt;table class=&quot;highlighttable&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;linenos&quot;&gt;&lt;div class=&quot;linenodiv&quot;&gt;&lt;pre&gt;1
2
3&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;move&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;frameCount&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
    &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sprite&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;frameCount&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;dx&lt;/span&gt;
    &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sprite&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;y&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;frameCount&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;dy&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;

&lt;p&gt;Rather than moving based on the number of times we’ve been called, which can
result in slowed-down movement when the framerate isn’t keeping up, we jump
forward by however many frames we &lt;em&gt;should&lt;/em&gt; have been called at this point in
time.&lt;/p&gt;
&lt;p&gt;One of these days, maybe I’ll make an actual game, but in the meanwhile I hope
you all enjoy playing with these fun little basic techniques for using Twisted
in your game engine.&lt;/p&gt;
&lt;div class=&quot;footnote&quot;&gt;
&lt;hr /&gt;
&lt;ol&gt;
&lt;li id=&quot;fn:1:nice-animations-with-twisted-and-pygame-2020-8&quot;&gt;
&lt;p id=&quot;fn:1&quot;&gt;I’m &lt;em&gt;mostly&lt;/em&gt; sure that this is safe, but, it’s definitely the dodgiest
thing here.  If you’re going to do this, make sure that you never do &lt;em&gt;any&lt;/em&gt;
drawing outside of the &lt;code&gt;draw()&lt;/code&gt; method. &lt;a class=&quot;footnote-backref&quot; href=&quot;https://glyph.twistedmatrix.com/feeds/all.atom.xml#fnref:1:nice-animations-with-twisted-and-pygame-2020-8&quot; title=&quot;Jump back to footnote 1 in the text&quot;&gt;↩&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id=&quot;fn:2:nice-animations-with-twisted-and-pygame-2020-8&quot;&gt;
&lt;p id=&quot;fn:2&quot;&gt;Hand-waving over a ton of tedious logic to change direction before we go
out of bounds... &lt;a class=&quot;footnote-backref&quot; href=&quot;https://glyph.twistedmatrix.com/feeds/all.atom.xml#fnref:2:nice-animations-with-twisted-and-pygame-2020-8&quot; title=&quot;Jump back to footnote 2 in the text&quot;&gt;↩&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;</description>
	<pubDate>Mon, 24 Aug 2020 02:50:00 +0000</pubDate>
</item>
<item>
	<title>Daniel Bader: Functional Programming Primitives in Python</title>
	<guid>https://dbader.org/blog/functional-programming-primitives-in-python</guid>
	<link>https://dbader.org/blog/functional-programming-primitives-in-python</link>
	<description>&lt;h1&gt;Functional Programming Primitives in Python&lt;/h1&gt;
&lt;p&gt;In this tutorial we’ll take a look at the basic building blocks of functional programming in Python, like the “filter”, “map”, and “reduce” functions.&lt;/p&gt;
&lt;img alt=&quot;Python Functional Programming&quot; src=&quot;https://dbader.org/static/figures/python-functional-programming.jpg&quot; width=&quot;1920&quot; height=&quot;1080&quot; /&gt;
&lt;!-- https://mikecvet.wordpress.com/2010/07/02/parallel-mapreduce-in-python/ --&gt;

&lt;!-- http://zabana.me/notes/functional-programming-and-javascript-arrays.html --&gt;

&lt;h2&gt;What Is Functional Programming?&lt;/h2&gt;
&lt;p&gt;Functional programming (FP) is a programming technique that avoids side effects by performing computation primarily through the evaluation of mathematical functions and the use of immutable data structures.&lt;/p&gt;
&lt;p&gt;In some cases, using a functional programming style can reduce the likelihood of bugs in your programs and make them more maintainable. Admittedly, FP is a little difficult to pin down because many modern FP languages (like Haskell) support a vast range of additional features and concepts—like advanced typing systems—that are often assumed to be a part of FP.&lt;/p&gt;
&lt;p&gt;But, when you read the commonly accepted definitions closely you’ll find that these advanced concepts are more “add-ons” than absolute necessities. For example, here’s how Wikipedia defines &lt;em&gt;functional programming&lt;/em&gt;:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;“In computer science, functional programming is a programming paradigm — a style of building the structure and elements of computer programs — that treats computation as the evaluation of mathematical functions and avoids changing-state and mutable data.” (&lt;a href=&quot;https://en.wikipedia.org/wiki/Functional_programming&quot; target=&quot;_blank&quot;&gt;Source&lt;/a&gt;)&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;In this tutorial you’ll learn how the use the basic building blocks of functional programming in Python.&lt;/p&gt;
&lt;p&gt;First, we’ll go over the distinction between immutable and mutable data structures in Python and how you can use them to write more maintainable and efficient code.&lt;/p&gt;
&lt;p&gt;After that you’ll see how to work with Python’s built-in FP primitives, such as the &lt;code&gt;filter()&lt;/code&gt;, &lt;code&gt;map()&lt;/code&gt;, and &lt;code&gt;reduce()&lt;/code&gt; functions.&lt;/p&gt;
&lt;p&gt;Let’s get started!&lt;/p&gt;
&lt;h2&gt;Immutable Data Structures in Python&lt;/h2&gt;
&lt;p&gt;In my experience, picking the right data structures to represent the domain objects you’ll be working with his half the battle in any kind of programming work you do. To illustrate the coding examples in this tutorial, I’ll use the following list of scientists as my “toy” data set:&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Name&lt;/th&gt;
&lt;th&gt;Field&lt;/th&gt;
&lt;th&gt;Born&lt;/th&gt;
&lt;th&gt;Nobel Prize?&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;Ada Lovelace&lt;/td&gt;
&lt;td&gt;math&lt;/td&gt;
&lt;td&gt;1815&lt;/td&gt;
&lt;td&gt;no&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Emmy Noether&lt;/td&gt;
&lt;td&gt;math&lt;/td&gt;
&lt;td&gt;1882&lt;/td&gt;
&lt;td&gt;no&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Marie Curie&lt;/td&gt;
&lt;td&gt;physics&lt;/td&gt;
&lt;td&gt;1867&lt;/td&gt;
&lt;td&gt;yes&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Tu Youyou&lt;/td&gt;
&lt;td&gt;chemistry&lt;/td&gt;
&lt;td&gt;1930&lt;/td&gt;
&lt;td&gt;yes&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Ada Yonath&lt;/td&gt;
&lt;td&gt;chemistry&lt;/td&gt;
&lt;td&gt;1939&lt;/td&gt;
&lt;td&gt;yes&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Vera Rubin&lt;/td&gt;
&lt;td&gt;astronomy&lt;/td&gt;
&lt;td&gt;1928&lt;/td&gt;
&lt;td&gt;no&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Sally Ride&lt;/td&gt;
&lt;td&gt;physics&lt;/td&gt;
&lt;td&gt;1951&lt;/td&gt;
&lt;td&gt;no&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;As you can see, all of these records follow a uniform structure. Each entry in this list represents a well-known scientist and some associated data, like their name, the field they worked in, the year they were born, and whether or not they ever won the Nobel prize.&lt;/p&gt;
&lt;p&gt;This data set will be our playground for exploring the most common Python functional programming techniques.&lt;/p&gt;
&lt;p&gt;The next thing we’ll need to figure out is &lt;strong&gt;how can we represent this data set in our Python program?&lt;/strong&gt; There are a number of options we can use to represent this data in Python. My first hunch when I started writing this tutorial was to use plain dictionary objects:&lt;/p&gt;
&lt;div class=&quot;codehilite&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;scientists&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'name'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'Ada Lovelace'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'field'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'math'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'born'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1815&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'nobel'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;False&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'name'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'Emmy Noether'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'field'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'math'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'born'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1882&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'nobel'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;False&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'name'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'Marie Curie'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'field'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'physics'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'born'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1867&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'nobel'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;True&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'name'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'Tu Youyou'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'field'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'chemistry'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'born'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1930&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'nobel'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;True&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'name'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'Ada Yonath'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'field'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'chemistry'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'born'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1939&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'nobel'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;True&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'name'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'Vera Rubin'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'field'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'astronomy'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'born'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1928&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'nobel'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;False&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'name'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'Sally Ride'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'field'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'physics'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'born'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1951&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'nobel'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;False&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;This looks quite nice—but there are two downsides with this approach:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Plain dictionaries make no guarantees that I’m using consistent field names. I could easily introduce a typo and write &lt;code&gt;'borne'&lt;/code&gt; instead of &lt;code&gt;'born'&lt;/code&gt; in one of the items and that would lead to errors and bugs further down the road.&lt;/li&gt;
&lt;li&gt;Python’s dicts are mutable data structures which means these items can be modified after they were created. I could accidentally change Ada Lovelace’s name to “Ed Lovelace” somewhere in my program and there would be nothing stopping me from doing that.&lt;/li&gt;
&lt;li&gt;Lists are also mutable in Python, meaning that new items could be added or removed freely.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;That’s why I decided to use a more stringent representation for this list of scientists. I’m using &lt;code&gt;collections.namedtuple&lt;/code&gt; from the Python standard library to define an &lt;em&gt;immutable&lt;/em&gt; data type (&lt;code&gt;Scientist&lt;/code&gt;) that holds all of the associated fields:&lt;/p&gt;
&lt;div class=&quot;codehilite&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;collections&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;Scientist&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;collections&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;namedtuple&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'Scientist'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;
    &lt;span class=&quot;s1&quot;&gt;'name'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;s1&quot;&gt;'field'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;s1&quot;&gt;'born'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;s1&quot;&gt;'nobel'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;  &lt;span class=&quot;c1&quot;&gt;# Won nobel prize?&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Using the &lt;code&gt;Scientist&lt;/code&gt; namedtuple I can now define my data set as an, once again &lt;em&gt;immutable&lt;/em&gt;, tuple of &lt;code&gt;Scientist&lt;/code&gt; objects. This disallows changing individual fields on each item, ensures that all field names are set with the correct spelling, and that the resulting list of items can’t be modified after the fact:&lt;/p&gt;
&lt;div class=&quot;codehilite&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;scientists&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;Scientist&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'Ada Lovelace'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;field&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'math'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;born&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1815&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;nobel&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;False&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;Scientist&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'Emmy Noether'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;field&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'math'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;born&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1882&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;nobel&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;False&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;Scientist&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'Marie Curie'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;field&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'physics'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;born&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1867&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;nobel&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;True&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;Scientist&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'Tu Youyou'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;field&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'chemistry'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;born&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1930&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;nobel&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;True&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;Scientist&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'Ada Yonath'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;field&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'chemistry'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;born&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1939&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;nobel&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;True&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;Scientist&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'Vera Rubin'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;field&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'astronomy'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;born&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1928&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;nobel&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;False&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;Scientist&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'Sally Ride'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;field&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'physics'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;born&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1951&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;nobel&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;False&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Now, &lt;strong&gt;what’s so great about immutability?&lt;/strong&gt; Like I said before, the state of an immutable object can’t be modified after it was created. To give you an example, this is great for writing applications that use &lt;a href=&quot;https://dbader.org/blog/python-parallel-computing-in-60-seconds&quot;&gt;parallel computing&lt;/a&gt; to complete their work faster.&lt;/p&gt;
&lt;p&gt;Immutable data structures are inherently more thread-safe than mutable objects because they allow one thread of execution to act on the data without worrying about what other threads are doing.&lt;/p&gt;
&lt;p&gt;And while the use of functional programming doesn’t require the use of parallel computing or a multithreaded execution model, it is one of the advantages of FP that writing parallelized code becomes easier and more enjoyable—as long as we represent our data with some foresight.&lt;/p&gt;
&lt;p&gt;Of course, you could very well implement the examples in this tutorial using a list of dictionaries or tuples. Actually, this would make a great exercise for you to try out later 🙂&lt;/p&gt;
&lt;p&gt;Besides guaranteeing immutability, using &lt;code&gt;collections.namedtuple&lt;/code&gt; here has another benefit: I find that being able to type &lt;code&gt;x.name&lt;/code&gt; is more readable than having to deal with &lt;code&gt;x['name']&lt;/code&gt; dictionary keys or tuple indexes everywhere. But that’s just my personal preference.&lt;/p&gt;
&lt;p&gt;If you’d like to dig deeper into the subject of immutable data structures in Python and how they relate to a functional programming style, I’ve recorded an 18 minute video tutorial. You can watch it in the video player embedded below or directly on my &lt;a href=&quot;https://dbader.org/youtube&quot;&gt;YouTube channel&lt;/a&gt;:&lt;/p&gt;
&lt;div class=&quot;youtube-embed&quot;&gt;
    
&lt;/div&gt;

&lt;div class=&quot;youtube-subscribe&quot;&gt;
    &lt;p&gt;» &lt;a href=&quot;https://dbader.org/youtube/&quot;&gt;Subscribe to the dbader.org YouTube Channel&lt;/a&gt; for more Python tutorials.&lt;/p&gt;
&lt;/div&gt;

&lt;p&gt;Before you move on, let’s talk about one more thing:&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;What’s pprint.pprint()?&lt;/strong&gt; Throughout this article I’ll be using the &lt;code&gt;pprint()&lt;/code&gt; function in the code examples to show you the results of our calculations and transformations.&lt;/p&gt;
&lt;p&gt;If you’re wondering where to find this function, it’s hosted in the &lt;code&gt;pprint&lt;/code&gt; module included with Python’s standard library. So in order to make the examples work you’ll need to import the function from the &lt;code&gt;pprint&lt;/code&gt; module:&lt;/p&gt;
&lt;div class=&quot;codehilite&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;kn&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;pprint&lt;/span&gt; &lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pprint&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Alright, now you’re all set to dive into some hands-on functional programming examples. Next up you’ll learn about the &lt;code&gt;filter()&lt;/code&gt;, &lt;code&gt;map()&lt;/code&gt;, and &lt;code&gt;reduce()&lt;/code&gt; functions.&lt;/p&gt;
&lt;h2&gt;Python Functional Primitive #1: &lt;code&gt;filter()&lt;/code&gt;&lt;/h2&gt;
&lt;p&gt;Python’s &lt;code&gt;filter&lt;/code&gt; function is a basic building block of functional programming. It allows you to &lt;em&gt;filter&lt;/em&gt; a collection of elements so that only an arbitrary subset of elements is included in the output. Okay, that sounds a little confusing. Let’s think of a concrete example:&lt;/p&gt;
&lt;p&gt;What if we wanted to get a list of all scientists in our list who won the Nobel prize at some point in their life?&lt;/p&gt;
&lt;p&gt;The classic way to do this filtering would be with a &lt;code&gt;for&lt;/code&gt; loop in Python:&lt;/p&gt;
&lt;div class=&quot;codehilite&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;nobel_scientists&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[]&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;entry&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;scientists&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;entry&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;nobel&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;is&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;True&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;nobel_scientists&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;append&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;entry&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;In the above code we’re spelling out step by step what needs to happen in order to create the “filtered” &lt;code&gt;nobel_scientists&lt;/code&gt; list. We start with an empty list and then keep adding scientists to it if we find that their &lt;code&gt;nobel&lt;/code&gt; flag is set to &lt;code&gt;True&lt;/code&gt;. This algorithm works, but it’s quite verbose and it needs to repeatedly update a mutable data structure (&lt;code&gt;nobel_scientists&lt;/code&gt;) to generate its output. This isn’t necessarily a bad thing—but if you approach the same problem with a functional programming approach you’ll notice some differences.&lt;/p&gt;
&lt;p&gt;Let’s use Python’s &lt;code&gt;filter()&lt;/code&gt; function to achieve the same result—a filtered list of scientists who won the Nobel prize. This is the full implementation:&lt;/p&gt;
&lt;div class=&quot;codehilite&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;nobel_scientists&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;tuple&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;filter&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;lambda&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;nobel&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;is&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;True&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;scientists&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;As you can see, &lt;code&gt;filter&lt;/code&gt; takes a collection of elements and a &lt;em&gt;filter predicate&lt;/em&gt; as its input. The filter predicate is just a function that takes an element as input and returns a bool indicating whether or not the element should be included in the resulting filtered list.&lt;/p&gt;
&lt;p&gt;I’m using a lambda here for brevity, but you could just as well expand this example into something more verbose by defining the filter predicate as a separate named function:&lt;/p&gt;
&lt;div class=&quot;codehilite&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;predicate&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;elem&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;elem&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;nobel&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;is&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;True&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;nobel_scientists&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;tuple&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;filter&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;predicate&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;scientists&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Also, why am I calling &lt;code&gt;tuple()&lt;/code&gt; on the result of the &lt;code&gt;filter&lt;/code&gt; call? Normally the &lt;code&gt;filter&lt;/code&gt; function returns an iterable &lt;code&gt;filter object&lt;/code&gt; on Python 3:&lt;/p&gt;
&lt;div class=&quot;codehilite&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;nobel_scientists&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;filter&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;lambda&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;nobel&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;is&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;True&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;scientists&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pprint&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;filter&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;nobel_scientists&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;filter&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;object&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;at&lt;/span&gt; &lt;span class=&quot;mh&quot;&gt;0x1027daa58&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;div class=&quot;codehilite&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pprint&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;list&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;nobel_scientists&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Scientist&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'Marie Curie'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;field&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'physics'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;born&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1867&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;nobel&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;True&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;
 &lt;span class=&quot;n&quot;&gt;Scientist&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'Tu Youyou'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;field&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'chemistry'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;born&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1930&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;nobel&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;True&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;
 &lt;span class=&quot;n&quot;&gt;Scientist&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'Ada Yonath'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;field&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'chemistry'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;born&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1939&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;nobel&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;True&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)]&lt;/span&gt;

&lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pprint&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;list&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;nobel_scientists&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;[]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;div class=&quot;codehilite&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;nobel_scientists&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;tuple&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;scientists&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;nobel&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;is&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;True&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;div class=&quot;youtube-embed&quot;&gt;
    
&lt;/div&gt;

&lt;div class=&quot;youtube-subscribe&quot;&gt;
    &lt;p&gt;» &lt;a href=&quot;https://dbader.org/youtube/&quot;&gt;Subscribe to the dbader.org YouTube Channel&lt;/a&gt; for more Python tutorials.&lt;/p&gt;
&lt;/div&gt;

&lt;p&gt;The &lt;code&gt;filter()&lt;/code&gt; is one of the functional programming primitives or building blocks available in Python and it’s useful in a number of contexts.&lt;/p&gt;
&lt;p&gt;Let’s filter this data set&lt;/p&gt;
&lt;h2&gt;Python Functional Primitive #2: &lt;code&gt;map()&lt;/code&gt;&lt;/h2&gt;
&lt;p&gt;The &lt;code&gt;map&lt;/code&gt; function takes a function and a sequence of items. It will then essentially loop over all items in the sequence and will return a new sequence of identical length containing the results of each function call.&lt;/p&gt;
&lt;p&gt;Let’s make this a little more concrete though. If you have a list of values and a function &lt;code&gt;f()&lt;/code&gt;, mapping &lt;code&gt;f&lt;/code&gt; to the list results in the following transformation:&lt;/p&gt;
&lt;div class=&quot;codehilite&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;y&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;z&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;---&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;map&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;---&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;y&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;z&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;For example, we could transform our input list of scientists into a list of dictionaries with some derived properties computed from the original ones.&lt;/p&gt;
&lt;p&gt;To do so we first define a transformation function that takes a &lt;code&gt;Scientist&lt;/code&gt; object as its input and returns a new value. In our case it’ll be a dictionary with some derived properties.&lt;/p&gt;
&lt;p&gt;Once we’ve defined the transformation function we can call &lt;code&gt;map()&lt;/code&gt; and apply the transformation to the original input sequence:&lt;/p&gt;
&lt;div class=&quot;codehilite&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;transform&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'name'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'age'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2017&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;born&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;names_and_ages&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;map&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;transform&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;scientists&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Note how this won’t modify the input sequence. Instead, calling &lt;code&gt;map()&lt;/code&gt; creates a new sequence that’s based on the original input.&lt;/p&gt;
&lt;p&gt;If you try to print the resulting &lt;code&gt;names_and_ages&lt;/code&gt; variable you’ll get a slightly surprising result (on Python 3):&lt;/p&gt;
&lt;div class=&quot;codehilite&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pprint&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;names_and_ages&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;map&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;object&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;at&lt;/span&gt; &lt;span class=&quot;mh&quot;&gt;0x1025789e8&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;It turns out that the &lt;code&gt;map()&lt;/code&gt; function is &lt;em&gt;lazy&lt;/em&gt;. Instead of returning a fully instantiated sequence that contains all transformed items, it returns an iterator (called a &lt;code&gt;map object&lt;/code&gt;) that performs the transformation item by item when it is consumed.&lt;/p&gt;
&lt;p&gt;This is a little bit difficult to visualize. So what I’ll do instead is convert this iterator into a fully instantiated &lt;code&gt;list&lt;/code&gt; or &lt;code&gt;tuple&lt;/code&gt; object so we can inspect it more easily in the Python REPL.&lt;/p&gt;
&lt;p&gt;In this case I’m going with a &lt;code&gt;tuple&lt;/code&gt; to keep the output sequence immutable:&lt;/p&gt;
&lt;div class=&quot;codehilite&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pprint&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;tuple&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;names_and_ages&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;({&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'age'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;202&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'name'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'Ada Lovelace'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;
 &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'age'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;135&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'name'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'Emmy Noether'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;
 &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'age'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;150&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'name'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'Marie Curie'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;
 &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'age'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;87&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'name'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'Tu Youyou'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;
 &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'age'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;78&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'name'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'Ada Yonath'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;
 &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'age'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;89&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'name'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'Vera Rubin'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;
 &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'age'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;66&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'name'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'Sally Ride'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;})&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;[If you’d like to learn more about iterators check out my tutorial here and my Python Tricks book.]&lt;/p&gt;
&lt;p&gt;Using a single-expression lambda function and converting the &lt;code&gt;map object&lt;/code&gt; iterator into a proper tuple, we can shorten the above code to this:&lt;/p&gt;
&lt;div class=&quot;codehilite&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;names_and_ages&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;tuple&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;map&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;lambda&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'name'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'age'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2017&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;born&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;scientists&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;We can make this code more Pythonic by removing the &lt;code&gt;map&lt;/code&gt; call and using a &lt;em&gt;list comprehension&lt;/em&gt; instead:&lt;/p&gt;
&lt;div class=&quot;codehilite&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;names_and_ages&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'name'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'age'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2017&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;born&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;scientists&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Notice how I previously used immutable &lt;code&gt;tuple&lt;/code&gt; objects. We can achieve the same result by using the &lt;code&gt;tuple()&lt;/code&gt; constructor in combination with a &lt;em&gt;generator expression&lt;/em&gt;:&lt;/p&gt;
&lt;div class=&quot;codehilite&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;names_and_ages&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;tuple&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'name'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'age'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2017&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;born&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;scientists&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;div class=&quot;youtube-embed&quot;&gt;
    
&lt;/div&gt;

&lt;div class=&quot;youtube-subscribe&quot;&gt;
    &lt;p&gt;» &lt;a href=&quot;https://dbader.org/youtube/&quot;&gt;Subscribe to the dbader.org YouTube Channel&lt;/a&gt; for more Python tutorials.&lt;/p&gt;
&lt;/div&gt;

&lt;h2&gt;Python Functional Primitive #3: &lt;code&gt;reduce()&lt;/code&gt;&lt;/h2&gt;
&lt;div class=&quot;codehilite&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pprint&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;list&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;names_and_ages&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;[{&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'age'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;202&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'name'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'Ada Lovelace'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;
 &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'age'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;135&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'name'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'Emmy Noether'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;
 &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'age'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;150&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'name'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'Marie Curie'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;
 &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'age'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;87&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'name'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'Tu Youyou'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;
 &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'age'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;78&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'name'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'Ada Yonath'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;
 &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'age'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;89&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'name'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'Vera Rubin'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;
 &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'age'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;66&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'name'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'Sally Ride'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;div class=&quot;codehilite&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;total_age&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;functools&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;reduce&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;lambda&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;acc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;val&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;acc&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;val&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'age'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;names_and_ages&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;div class=&quot;codehilite&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;total_age&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;mi&quot;&gt;807&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;div class=&quot;codehilite&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;total_age&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;sum&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'age'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;names_and_ages&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;More interesting uses of &lt;code&gt;reduce()&lt;/code&gt;: grouping scientists by field&lt;/p&gt;
&lt;div class=&quot;codehilite&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;scientists_by_field&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;functools&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;reduce&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;lambda&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;acc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;val&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;**&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;acc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;**&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;val&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;field&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;acc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;val&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;field&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;val&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]}},&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;scientists&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'math'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[],&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'physics'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[],&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'chemistry'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[],&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'astronomy'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[]}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;pprint&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;scientists_by_field&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;# Can't reference values already in the dict while we're creating it&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;# scientists_by_field2 = {&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;#     val['born']: scientists_by_field2[val['field']] + [val['name']]&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;#     for val in scientists&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;# }&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;# pprint(scientists_by_field2)&lt;/span&gt;


&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;reducer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;acc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;val&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;acc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;val&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;field&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;append&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;val&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;acc&lt;/span&gt;


&lt;span class=&quot;n&quot;&gt;scientists_by_field3&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;functools&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;reduce&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;reducer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;scientists&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'math'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[],&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'physics'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[],&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'chemistry'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[],&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'astronomy'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[]}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;pprint&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;scientists_by_field3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;collections&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;scientists_by_field4&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;functools&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;reduce&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;reducer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;scientists&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;collections&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;defaultdict&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;list&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;pprint&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;scientists_by_field4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;


&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;itertools&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;scientists_by_field5&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;item&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]:&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;list&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;item&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;item&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;itertools&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;groupby&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;scientists&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;lambda&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;field&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;# groupby returns (group, iterator) tuples that we need to convert into&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;# concrete lists&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;pprint&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;scientists_by_field5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;div class=&quot;youtube-embed&quot;&gt;
    
&lt;/div&gt;

&lt;div class=&quot;youtube-subscribe&quot;&gt;
    &lt;p&gt;» &lt;a href=&quot;https://dbader.org/youtube/&quot;&gt;Subscribe to the dbader.org YouTube Channel&lt;/a&gt; for more Python tutorials.&lt;/p&gt;
&lt;/div&gt;

&lt;h2&gt;Functional Programming in Python – Conclusion&lt;/h2&gt;
&lt;p&gt;&lt;a href=&quot;https://www.youtube.com/playlist?list=PLP8GkvaIxJP1z5bu4NX_bFrEInBkAgTMr&quot; target=&quot;_blank&quot;&gt;“Functional Programming in Python” YouTube playlist&lt;/a&gt;&lt;/p&gt;&lt;hr /&gt;&lt;p&gt;&lt;em&gt;[ Improve Your Python with Dan's 🐍 &lt;strong&gt;Python Tricks&lt;/strong&gt; 💌 – Get a short &amp;amp; sweet Python Trick delivered to your inbox every couple of days. &lt;a href=&quot;https://dbader.org/python-tricks?utm_source=dbader-org&amp;utm_medium=rss&amp;utm_campaign=footer&quot;&gt;&amp;gt;&amp;gt; Click here to learn more and see examples&lt;/a&gt; ]&lt;/em&gt;&lt;/p&gt;</description>
	<pubDate>Mon, 24 Aug 2020 00:00:00 +0000</pubDate>
</item>
<item>
	<title>PSF GSoC students blogs: Weekly Check-in #13</title>
	<guid>https://blogs.python-gsoc.org/en/abijithbahuleyans-blog/weekly-check-in-13-1/</guid>
	<link>https://blogs.python-gsoc.org/en/abijithbahuleyans-blog/weekly-check-in-13-1/</link>
	<description>&lt;p&gt;Hey!&lt;/p&gt;

&lt;p&gt;&lt;b&gt;What did you do this week?&lt;/b&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Completed the cluster analysis template. Cluster status will display the overview of nodes, number of nodes connected, total number of CPU and GPU worker.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;b&gt;What is coming up next?&lt;/b&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Will improve the feature if needed. Add support for the python code in download scripts.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;b&gt;Did you get stuck anywhere?&lt;/b&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;No.&lt;/em&gt;&lt;/p&gt;</description>
	<pubDate>Sun, 23 Aug 2020 17:28:57 +0000</pubDate>
</item>
<item>
	<title>PSF GSoC students blogs: Weekly Check-in #13</title>
	<guid>https://blogs.python-gsoc.org/en/nibba2018s-blog/weekly-check-in-13/</guid>
	<link>https://blogs.python-gsoc.org/en/nibba2018s-blog/weekly-check-in-13/</link>
	<description>&lt;h2&gt;Part of the Journey is the end unless its Open Source!&lt;/h2&gt;

&lt;p&gt;&lt;span&gt;Hello and welcome to my final weekly check-in. Today officially marks the end of  the coding period for GSoC 2020. I enjoyed every bit of it. This was a life-changing experience for me and now I observe and interpret everything from a different perspective altogether. I have grown into a better developer and a person since GSoC. I would like to thank all my mentors and especially Serge for his immense support and mentorship. I would love to contribute to fury even after GSoC is over but unfortunately my semester break is over so I wont be as active as I was during the summer.&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;&lt;span&gt;Now, regarding work I will be sharing my progress with the File Dialog UI component.&lt;/span&gt; &lt;span&gt;The official repository of my sub-org can be found &lt;/span&gt; &lt;span&gt;&lt;a href=&quot;https://github.com/fury-gl/fury&quot;&gt;here&lt;/a&gt;&lt;/span&gt;.&lt;/p&gt;

&lt;h2&gt;What did you do this week?&lt;/h2&gt;

&lt;p&gt;&lt;span&gt;This week I worked on the File Dialog UI component. Fury previously had a FileMenu component which could browse through the file system but we needed a dialog like implementation for it so that its easier for the users to read and write files during runtime. I tried implementing a simple design for it. It specifically has two modes, one for saving files and the other for writing files. The implementation can be demonstrated as follows:&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;&lt;u&gt;&lt;span&gt;Open Dialog:&lt;/span&gt;&lt;/u&gt;&lt;/p&gt;

&lt;p&gt;&lt;img alt=&quot;&quot; src=&quot;https://user-images.githubusercontent.com/29832615/90978632-df12c780-e56c-11ea-8517-6243ea06bdd2.gif&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;u&gt;&lt;span&gt;Save Dialog:&lt;/span&gt;&lt;/u&gt;&lt;/p&gt;

&lt;p&gt;&lt;img alt=&quot;&quot; src=&quot;https://user-images.githubusercontent.com/29832615/90978638-eafe8980-e56c-11ea-835a-3a82ccee2973.gif&quot; /&gt;&lt;/p&gt;

&lt;h2&gt;What is coming up next?&lt;/h2&gt;

&lt;p&gt;&lt;span&gt;Next week I will start with my final GSoC documentation and code submission. I will also try to implement the tests and tutorials for File Dialog or any further changes requested by my mentors. If I am not able to finish it within the next week, I will get it done after GSoC.&lt;/span&gt;&lt;/p&gt;

&lt;h2&gt;Did you get stuck anywhere?&lt;/h2&gt;

&lt;p&gt;&lt;span&gt;I did not face any major issues this week.&lt;/span&gt;&lt;/p&gt;

&lt;div&gt;&lt;span&gt;Thank you all for your love and support. &lt;/span&gt;❤️😄&lt;/div&gt;</description>
	<pubDate>Sun, 23 Aug 2020 15:50:32 +0000</pubDate>
</item>
<item>
	<title>Catalin George Festila: Python Qt5 - Add and remove items between two QTreeWidgets.</title>
	<guid>http://python-catalin.blogspot.com/2020/08/python-qt5-add-and-remove-items-between.html</guid>
	<link>http://python-catalin.blogspot.com/2020/08/python-qt5-add-and-remove-items-between.html</link>
	<description>Today's tutorial will show you how to add and remove items between two QTreeWidgets.
The source code is very simple to understand: the user interface is created with two QTreeWidgets.
One is completed with elements and when the buttons are pressed, the elements are interchanged.
import sys
from PyQt5.QtWidgets import QApplication, QWidget, QDesktopWidget, QPushButton
from PyQt5.QtWidgets import</description>
	<pubDate>Sun, 23 Aug 2020 13:20:54 +0000</pubDate>
</item>
<item>
	<title>PSF GSoC students blogs: Weekly Check-in #7</title>
	<guid>https://blogs.python-gsoc.org/en/abhaykatherias-blog/weekly-check-in-7-11/</guid>
	<link>https://blogs.python-gsoc.org/en/abhaykatherias-blog/weekly-check-in-7-11/</link>
	<description>&lt;div class=&quot;lead&quot;&gt;
&lt;div class=&quot;lead cms-plugin cms-plugin-aldryn_newsblog-article-lead_in-759 cms-render-model&quot;&gt;
&lt;div class=&quot;lead cms-plugin cms-plugin-aldryn_newsblog-article-lead_in-720 cms-render-model&quot;&gt;
&lt;h1 class=&quot;cms-plugin cms-plugin-aldryn_newsblog-article-lead_in-543 cms-render-model cms-plugin-aldryn_newsblog-article-lead_in-566 cms-plugin-aldryn_newsblog-article-lead_in-610 cms-plugin-aldryn_newsblog-article-lead_in-650&quot;&gt;&lt;strong&gt;What did I do this week?&lt;/strong&gt;&lt;/h1&gt;

&lt;p&gt;&lt;strong&gt;&lt;span&gt;I finalised my work this week and prepared for final evaluation also helped test the multistage analysis patch by ForgetMe17.&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;h1 class=&quot;cms-plugin cms-plugin-aldryn_newsblog-article-lead_in-543 cms-render-model cms-plugin-aldryn_newsblog-article-lead_in-566 cms-plugin-aldryn_newsblog-article-lead_in-610 cms-plugin-aldryn_newsblog-article-lead_in-650&quot;&gt;&lt;strong&gt;What's next?&lt;/strong&gt;&lt;/h1&gt;

&lt;p class=&quot;cms-plugin cms-plugin-aldryn_newsblog-article-lead_in-650 cms-render-model&quot;&gt;I will try to implement the license parser after gsoc is over I will still be contributing to tern.&lt;/p&gt;

&lt;h1 class=&quot;cms-plugin cms-plugin-aldryn_newsblog-article-lead_in-543 cms-render-model cms-plugin-aldryn_newsblog-article-lead_in-566 cms-plugin-aldryn_newsblog-article-lead_in-610 cms-plugin-aldryn_newsblog-article-lead_in-650&quot;&gt;&lt;strong&gt;Did I get stuck somewhere?&lt;/strong&gt;&lt;/h1&gt;

&lt;p class=&quot;cms-plugin cms-plugin-aldryn_newsblog-article-lead_in-650 cms-render-model&quot;&gt;&lt;strong&gt;&lt;span&gt;none&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;</description>
	<pubDate>Sun, 23 Aug 2020 08:53:32 +0000</pubDate>
</item>
<item>
	<title>Glyph Lefkowitz: Never Run ‘python’ In Your Downloads Folder</title>
	<guid>https://glyph.twistedmatrix.com/2020/08/never-run-python-in-your-downloads-folder.html</guid>
	<link>https://glyph.twistedmatrix.com/2020/08/never-run-python-in-your-downloads-folder.html</link>
	<description>&lt;p&gt;One of the wonderful things about Python is the ease with which you can start
writing a script - just drop some code into a &lt;code&gt;.py&lt;/code&gt; file, and run &lt;code&gt;python
my_file.py&lt;/code&gt;.  Similarly it’s easy to get started with modularity: split
&lt;code&gt;my_file.py&lt;/code&gt; into &lt;code&gt;my_app.py&lt;/code&gt; and &lt;code&gt;my_lib.py&lt;/code&gt;, and you can &lt;code&gt;import my_lib&lt;/code&gt; from
&lt;code&gt;my_app.py&lt;/code&gt; and start organizing your code into modules.&lt;/p&gt;
&lt;p&gt;However, the details of the machinery that makes this work have some
surprising, and sometimes &lt;em&gt;very&lt;/em&gt; security-critical consequences: the more
convenient it is for &lt;em&gt;you&lt;/em&gt; to execute code from different locations, the more
opportunities an attacker has to execute it as well...&lt;/p&gt;
&lt;h2&gt;Python needs a safe space to load code from&lt;/h2&gt;
&lt;p&gt;Here are three critical assumptions embedded in Python’s security model:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;Every entry on &lt;code&gt;sys.path&lt;/code&gt; is assumed to be a secure location from which
   it is safe to execute arbitrary code.&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;The directory where the “main script” is located is always on
   &lt;code&gt;sys.path&lt;/code&gt;.&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;When invoking &lt;code&gt;python&lt;/code&gt; directly, the &lt;em&gt;current directory&lt;/em&gt; is treated as the
   “main script” location, &lt;em&gt;even when passing the &lt;code&gt;-c&lt;/code&gt; or &lt;code&gt;-m&lt;/code&gt; options&lt;/em&gt;. &lt;/strong&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;If you’re running a Python application that’s been installed properly on your
computer, the only location outside of your Python install or virtualenv that
will be automatically added to your &lt;code&gt;sys.path&lt;/code&gt; (by default) is the location
where the main executable, or script, is installed.&lt;/p&gt;
&lt;p&gt;For example, if you have &lt;code&gt;pip&lt;/code&gt; installed in &lt;code&gt;/usr/bin&lt;/code&gt;, and you run
&lt;code&gt;/usr/bin/pip&lt;/code&gt;, then only &lt;code&gt;/usr/bin&lt;/code&gt; will be added to &lt;code&gt;sys.path&lt;/code&gt; by this
feature.  Anything that can write files to that &lt;code&gt;/usr/bin&lt;/code&gt; can already make
you, or your system, run stuff, so it’s a pretty safe place.  (Consider what
would happen if your &lt;code&gt;ls&lt;/code&gt; executable got replaced with something nasty.)&lt;/p&gt;
&lt;p&gt;&lt;em&gt;However&lt;/em&gt;, one &lt;a href=&quot;https://bugs.python.org/issue22295&quot;&gt;emerging convention&lt;/a&gt; is to
prefer calling &lt;code&gt;/path/to/python -m pip&lt;/code&gt; in order to avoid the complexities of
setting up &lt;code&gt;$PATH&lt;/code&gt; properly, and to avoid dealing with divergent documentation
of how scripts are installed on Windows (usually as &lt;code&gt;.exe&lt;/code&gt; files these days,
rather than &lt;code&gt;.py&lt;/code&gt; files).&lt;/p&gt;
&lt;p&gt;This is fine — as long as you trust that you’re the only one putting files into
the places you can import from — including your working directory.&lt;/p&gt;
&lt;h2&gt;Your “Downloads” folder isn’t safe&lt;/h2&gt;
&lt;p&gt;As the category of attacks with the name &lt;a href=&quot;https://msrc-blog.microsoft.com/2018/04/04/triaging-a-dll-planting-vulnerability/&quot;&gt;“DLL
Planting”&lt;/a&gt;
indicates, there are many ways that browsers (and sometimes other software) can
be tricked into putting files with arbitrary filenames into the Downloads
folder, without user interaction.&lt;/p&gt;
&lt;p&gt;Browsers are starting to take this class of vulnerability more seriously, and
adding various mitigations to avoid allowing sites to surreptitiously drop
files in your downloads folder when you visit them.&lt;sup id=&quot;fnref:1:never-run-python-in-your-downloads-folder-2020-8&quot;&gt;&lt;a class=&quot;footnote-ref&quot; href=&quot;https://glyph.twistedmatrix.com/feeds/all.atom.xml#fn:1:never-run-python-in-your-downloads-folder-2020-8&quot; id=&quot;fnref:1&quot;&gt;1&lt;/a&gt;&lt;/sup&gt;&lt;/p&gt;
&lt;p&gt;Even with mitigations though, it will be hard to stamp this out entirely: for
example, the &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Content-Disposition#Directives&quot;&gt;&lt;code&gt;Content-Disposition&lt;/code&gt; HTTP header’s &lt;code&gt;filename*&lt;/code&gt;
parameter&lt;/a&gt;
exists entirely to allow the the site to choose the filename that it downloads
to.&lt;/p&gt;
&lt;h2&gt;Composing the attack&lt;/h2&gt;
&lt;p&gt;You’ve made a habit of &lt;code&gt;python -m pip&lt;/code&gt; to install stuff.  You download a Python
package from a totally trustworthy website that, for whatever reason, has a
Python wheel by direct download instead of on PyPI.  Maybe it’s internal, maybe
it’s a pre-release; whatever.  So you download &lt;code&gt;totally-legit-package.whl&lt;/code&gt;, and
then:&lt;/p&gt;
&lt;table class=&quot;highlighttable&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;linenos&quot;&gt;&lt;div class=&quot;linenodiv&quot;&gt;&lt;pre&gt;1
2&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class=&quot;go&quot;&gt;~$ cd Downloads&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;~/Downloads$ python -m pip install ./totally-legit-package.whl&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;

&lt;p&gt;This seems like a reasonable thing to do, but unbeknownst to you, two weeks ago,
a completely different site you visited had some XSS JavaScript on it that
downloaded a &lt;code&gt;pip.py&lt;/code&gt; with some malware in it into your downloads folder.&lt;/p&gt;
&lt;p&gt;Boom.&lt;/p&gt;
&lt;h2&gt;Demonstrating it&lt;/h2&gt;
&lt;p&gt;Here’s a quick demonstration of the attack:&lt;/p&gt;
&lt;table class=&quot;highlighttable&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;linenos&quot;&gt;&lt;div class=&quot;linenodiv&quot;&gt;&lt;pre&gt;1
2
3
4
5&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class=&quot;go&quot;&gt;~$ mkdir attacker_dir&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;~$ cd attacker_dir&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;~/attacker_dir$ echo 'print(&quot;lol ur pwnt&quot;)' &amp;gt; pip.py&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;~/attacker_dir$ python -m pip install requests&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;lol ur pwnt&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;

&lt;h2&gt;&lt;code&gt;PYTHONPATH&lt;/code&gt; surprises&lt;/h2&gt;
&lt;p&gt;Just a few paragraphs ago, I said:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;If you’re running a Python application that’s been installed properly on your
computer, the only location outside of your Python install or virtualenv that
will be automatically added to your &lt;code&gt;sys.path&lt;/code&gt; (by default) is the location
where the main executable, or script, is installed.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;So what is that parenthetical “by default” doing there?  What other directories
might be added?&lt;/p&gt;
&lt;p&gt;Anything entries on your
&lt;a href=&quot;https://docs.python.org/3/using/cmdline.html#envvar-PYTHONPATH&quot;&gt;&lt;code&gt;$PYTHONPATH&lt;/code&gt;&lt;/a&gt;
environment variable.  You wouldn’t put your current directory on
&lt;code&gt;$PYTHONPATH&lt;/code&gt;, would you?&lt;/p&gt;
&lt;p&gt;Unfortunately, there’s one common way that you might have done so by accident.&lt;/p&gt;
&lt;p&gt;Let’s simulate a “vulnerable” Python application:&lt;/p&gt;
&lt;table class=&quot;highlighttable&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;linenos&quot;&gt;&lt;div class=&quot;linenodiv&quot;&gt;&lt;pre&gt;1
2
3
4
5&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;# tool.py&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;try&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;optional_extra&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;except&lt;/span&gt; &lt;span class=&quot;ne&quot;&gt;ImportError&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;nb&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;extra not found, that's fine&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;

&lt;p&gt;Make 2 directories: &lt;code&gt;install_dir&lt;/code&gt; and &lt;code&gt;attacker_dir&lt;/code&gt;.  Drop this in
&lt;code&gt;install_dir&lt;/code&gt;.  Then, &lt;code&gt;cd attacker_dir&lt;/code&gt; and put our sophisticated malware
there, under the name used by &lt;code&gt;tool.py&lt;/code&gt;:&lt;/p&gt;
&lt;table class=&quot;highlighttable&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;linenos&quot;&gt;&lt;div class=&quot;linenodiv&quot;&gt;&lt;pre&gt;1
2&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;# optional_extra.py&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;lol ur pwnt&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;

&lt;p&gt;Finally, let’s run it:&lt;/p&gt;
&lt;table class=&quot;highlighttable&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;linenos&quot;&gt;&lt;div class=&quot;linenodiv&quot;&gt;&lt;pre&gt;1
2&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class=&quot;go&quot;&gt;~/attacker_dir$ python ../install_dir/tool.py&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;extra not found, that's fine&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;

&lt;p&gt;So far, so good.&lt;/p&gt;
&lt;p&gt;But, here’s the common mistake.  Most places that still recommend &lt;code&gt;PYTHONPATH&lt;/code&gt;
recommend adding things to it &lt;a href=&quot;https://askubuntu.com/a/250935&quot;&gt;like so&lt;/a&gt;:&lt;/p&gt;
&lt;table class=&quot;highlighttable&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;linenos&quot;&gt;&lt;div class=&quot;linenodiv&quot;&gt;&lt;pre&gt;1&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class=&quot;nb&quot;&gt;export&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;PYTHONPATH&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;/new/useful/stuff:&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$PYTHONPATH&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;

&lt;p&gt;Intuitively, this makes sense; if you’re adding project X to your
&lt;code&gt;$PYTHONPATH&lt;/code&gt;, maybe project Y had already added something, maybe not; you
never want to blow it away and replace what other parts of your shell startup
might have done with it, especially if you’re writing documentation that lots
of different people will use.&lt;/p&gt;
&lt;p&gt;But this idiom has a critical flaw: the &lt;em&gt;first&lt;/em&gt; time it’s invoked, if
&lt;code&gt;$PYTHONPATH&lt;/code&gt; was previously either empty or un-set, this then &lt;em&gt;includes an
empty string&lt;/em&gt;, which resolves to the current directory.  Let’s try it:&lt;/p&gt;
&lt;table class=&quot;highlighttable&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;linenos&quot;&gt;&lt;div class=&quot;linenodiv&quot;&gt;&lt;pre&gt;1
2
3&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class=&quot;go&quot;&gt;~/attacker_dir$ export PYTHONPATH=&quot;/a/perfectly/safe/place:$PYTHONPATH&quot;;&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;~/attacker_dir$ python ../install_dir/tool.py&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;lol ur pwnt&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;

&lt;p&gt;Oh no!  Well, just to be safe, let’s empty out &lt;code&gt;$PYTHONPATH&lt;/code&gt; and try it again:&lt;/p&gt;
&lt;table class=&quot;highlighttable&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;linenos&quot;&gt;&lt;div class=&quot;linenodiv&quot;&gt;&lt;pre&gt;1
2
3&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class=&quot;go&quot;&gt;~/attacker_dir$ export PYTHONPATH=&quot;&quot;;&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;~/attacker_dir$ python ../install_dir/tool.py&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;lol ur pwnt&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;

&lt;p&gt;Still not safe!&lt;/p&gt;
&lt;p&gt;What’s happening here is that if &lt;code&gt;PYTHONPATH&lt;/code&gt; is &lt;em&gt;empty&lt;/em&gt;, that is not the same
thing as it being &lt;em&gt;unset&lt;/em&gt;.  From within Python, this is the difference between
&lt;code&gt;os.environ.get(&quot;PYTHONPATH&quot;) == &quot;&quot;&lt;/code&gt; and &lt;code&gt;os.environ.get(&quot;PYTHONPATH&quot;) ==
None&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;If you want to be sure you’ve cleared &lt;code&gt;$PYTHONPATH&lt;/code&gt; from a shell (or somewhere
in a shell startup), you need to use the &lt;code&gt;unset&lt;/code&gt; command:&lt;/p&gt;
&lt;table class=&quot;highlighttable&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;linenos&quot;&gt;&lt;div class=&quot;linenodiv&quot;&gt;&lt;pre&gt;1
2&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class=&quot;go&quot;&gt;~/attacker_dir$ python ../install_dir/tool.py&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;extra not found, that's fine&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;

&lt;p&gt;Setting &lt;code&gt;PYTHONPATH&lt;/code&gt; used to be the most common way to set up a Python
development environment; hopefully it’s mostly fallen out of favor, with
virtualenvs serving this need better.  If you’ve got an old shell configuration
that still sets a &lt;code&gt;$PYTHONPATH&lt;/code&gt; that you don’t need any more, this is a good
opportunity to go ahead and delete it.&lt;/p&gt;
&lt;p&gt;However, if you &lt;em&gt;do&lt;/em&gt; need an idiom for
“appending to” &lt;code&gt;PYTHONPATH&lt;/code&gt; in a shell startup, use &lt;a href=&quot;https://unix.stackexchange.com/a/162893/3273&quot;&gt;this
technique&lt;/a&gt;:&lt;/p&gt;
&lt;table class=&quot;highlighttable&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;linenos&quot;&gt;&lt;div class=&quot;linenodiv&quot;&gt;&lt;pre&gt;1
2&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class=&quot;nb&quot;&gt;export&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;PYTHONPATH&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;PYTHONPATH&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:+&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;PYTHONPATH&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;new_entry_1&quot;&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;export&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;PYTHONPATH&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;PYTHONPATH&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:+&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;PYTHONPATH&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;new_entry_2&quot;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;

&lt;p&gt;In both bash and zsh, this results in&lt;/p&gt;
&lt;table class=&quot;highlighttable&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;linenos&quot;&gt;&lt;div class=&quot;linenodiv&quot;&gt;&lt;pre&gt;1
2&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class=&quot;gp&quot;&gt;$&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;PYTHONPATH&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;new_entry_1:new_entry_2&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;

&lt;p&gt;with no extra colons or blank entries on your &lt;code&gt;$PYTHONPATH&lt;/code&gt; variable now.&lt;/p&gt;
&lt;p&gt;Finally: if you’re still using &lt;code&gt;$PYTHONPATH&lt;/code&gt;, be sure to always use absolute
paths!&lt;/p&gt;
&lt;h2&gt;Related risks&lt;/h2&gt;
&lt;p&gt;There are a bunch of variant unsafe behaviors related to inspecting files in
your &lt;code&gt;Downloads&lt;/code&gt; folder by doing anything interactive with Python.  Other risky
activities:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Running &lt;code&gt;python ~/Downloads/anything.py&lt;/code&gt; (even if &lt;code&gt;anything.py&lt;/code&gt; is itself
  safe) from &lt;em&gt;anywhere&lt;/em&gt; - as it will add your downloads folder to &lt;code&gt;sys.path&lt;/code&gt; by
  virtue of &lt;code&gt;anything.py&lt;/code&gt;’s location.&lt;/li&gt;
&lt;li&gt;Jupyter Notebook puts the directory that the notebook is in onto &lt;code&gt;sys.path&lt;/code&gt;,
  just like Python puts the script directory there.  So &lt;code&gt;jupyter notebook
  ~/Downloads/anything.ipynb&lt;/code&gt; is just as dangerous as &lt;code&gt;python
  ~/Downloads/anything.py&lt;/code&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Get those scripts and notebooks out of your downloads folder before you run ’em!&lt;/p&gt;
&lt;p&gt;But &lt;code&gt;cd Downloads&lt;/code&gt; and then doing anything interactive remains a problem too:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Running a &lt;code&gt;python -c&lt;/code&gt; command that includes an &lt;code&gt;import&lt;/code&gt; statement while in
  your &lt;code&gt;~/Downloads&lt;/code&gt; folder&lt;/li&gt;
&lt;li&gt;Running &lt;code&gt;python&lt;/code&gt; interactively and importing anything while in your
  &lt;code&gt;~/Downloads&lt;/code&gt; folder&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Remember that &lt;code&gt;~/Downloads/&lt;/code&gt; isn’t special; it’s just one place where
unexpected files with attacker-chosen filenames might sneak in.  Be on the
lookout for other locations where this is true.  For example, if you’re
administering a server where the public can upload files, make &lt;em&gt;extra&lt;/em&gt; sure
that neither your application nor any administrator who might run &lt;code&gt;python&lt;/code&gt; ever
does &lt;code&gt;cd public_uploads&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Maybe consider changing the code that handles uploads to mangle file names to
put a &lt;code&gt;.uploaded&lt;/code&gt; at the end, avoiding the risk of a &lt;code&gt;.py&lt;/code&gt; file getting
uploaded and executed accidentally.&lt;/p&gt;
&lt;h2&gt;Mitigations&lt;/h2&gt;
&lt;p&gt;If you have tools written in Python that you want to use while in your
downloads folder, make a habit of preferring typing the path to the script
(&lt;code&gt;/path/to/venv/bin/pip&lt;/code&gt;) rather than the module (&lt;code&gt;/path/to/venv/bin/python -m
pip&lt;/code&gt;).&lt;/p&gt;
&lt;p&gt;In general, just avoid ever having &lt;code&gt;~/Downloads&lt;/code&gt; as your current working
directory, and move any software you want to use to a more appropriate location
before launching it.&lt;/p&gt;
&lt;p&gt;It’s important to understand where Python gets the code that it’s going to be
executing.  Giving someone the ability to execute even one line of arbitrary
Python is equivalent to giving them full control over your computer!&lt;/p&gt;
&lt;h2&gt;Why I wrote this article&lt;/h2&gt;
&lt;p&gt;When writing a “tips and tricks” article like this about security, it’s very
easy to imply that I, the author, am very clever for knowing this weird bunch
of trivia, and the only way for you, the reader, to stay safe, is to memorize a
huge pile of equally esoteric stuff and constantly be thinking about it.
Indeed, a previous draft of this post inadvertently did just that.  But that’s
a really terrible idea and not one that I want to have any part in propagating.&lt;/p&gt;
&lt;p&gt;So if I’m not trying to say that, then why post about it?  I’ll explain.&lt;/p&gt;
&lt;p&gt;Over many years of using Python, I’ve infrequently, but regularly, seen users
confused about the locations that Python loads code from.  One variety of this
confusion is when people put their first program that uses Twisted into a file
called &lt;code&gt;twisted.py&lt;/code&gt;.  That shadows the import of the library, breaking
everything.  Another manifestation of this confusion is a slow trickle of
confused security reports where a researcher drops a module into a location
where Python is documented to load code from — like the current directory in
the scenarios described above — and then load it, thinking that this reflects
an exploit because it’s executing arbitrary code.&lt;/p&gt;
&lt;p&gt;Any confusion like this — even if the system in question is “behaving as
intended”, and can’t readily be changed — is a vulnerability that an attacker
can exploit.&lt;/p&gt;
&lt;p&gt;System administrators and developers are high-value targets in the world of
cybercrime.  If you hack a user, you get that user’s data; but if you hack an
admin or a dev, and you do it right, you could get access to thousands of users
whose systems are under the administrator’s control or even millions of users
who use the developers’ software.&lt;/p&gt;
&lt;p&gt;Therefore, while &lt;a href=&quot;https://how.complexsystems.fail/#8&quot;&gt;“just be more careful all the time” is &lt;em&gt;not&lt;/em&gt; a sustainable
recipe for safety&lt;/a&gt;, to some extent, those
of us acting on our users’ behalf &lt;em&gt;do&lt;/em&gt; have a greater obligation to be more
careful.  At least, we should be informed about the behavior of our tools.
Developer tools, like Python, are inevitably power tools which may require more
care and precision than the average application.&lt;/p&gt;
&lt;p&gt;Nothing I’ve described above is a “bug” or an “exploit”, exactly; I don’t think
that the developers of Python or Jupyter have done anything &lt;em&gt;wrong&lt;/em&gt;; the system
works the way it’s designed and the way it’s designed makes sense.  I
personally do not have any great ideas for how things could be changed without
removing a ton of power from Python.&lt;/p&gt;
&lt;p&gt;One of my favorite safety inventions is &lt;a href=&quot;https://www.sawstop.com/why-sawstop/the-technology&quot;&gt;the
SawStop&lt;/a&gt;.  Nothing was
&lt;em&gt;wrong&lt;/em&gt; with the way table saws worked before its invention; they were
extremely dangerous tools that performed an important industrial function.  A
lot of very useful and important things were made with table saws.  Yet, it was
also true that table saws were responsible for a disproportionate share of
wood-shop accidents, and, in particular, lost fingers.  Despite plenty of care
taken by experienced and safety-conscious carpenters, the SawStop still saves
many fingers every year.&lt;/p&gt;
&lt;p&gt;So by highlighting this potential danger I also hope to provoke some thinking
among some enterprising security engineers out there.  What might be the
SawStop of arbitrary code execution for interactive interpreters?  What
invention might be able to prevent some of the scenarios I describe below
without significantly diminishing the power of tools like Python?&lt;/p&gt;
&lt;p&gt;Stay safe out there, friends.&lt;/p&gt;
&lt;hr /&gt;
&lt;h3&gt;Acknowledgments&lt;/h3&gt;
&lt;p&gt;Thanks very much to &lt;a href=&quot;https://www.ganssle.io&quot;&gt;Paul Ganssle&lt;/a&gt;, &lt;a href=&quot;https://vorpus.org&quot;&gt;Nathaniel
J. Smith&lt;/a&gt;, &lt;a href=&quot;http://itamarst.org&quot;&gt;Itamar Turner-Trauring&lt;/a&gt;
and &lt;a href=&quot;https://nelhage.com&quot;&gt;Nelson Elhage&lt;/a&gt; for &lt;em&gt;substantial&lt;/em&gt; feedback on earlier
drafts of this post.&lt;/p&gt;
&lt;p&gt;Any errors remain my own.&lt;/p&gt;
&lt;div class=&quot;footnote&quot;&gt;
&lt;hr /&gt;
&lt;ol&gt;
&lt;li id=&quot;fn:1:never-run-python-in-your-downloads-folder-2020-8&quot;&gt;
&lt;p id=&quot;fn:1&quot;&gt;Restricting which sites can drive-by drop files into your downloads
folder is a great security feature, except the main consequence of adding
it is that &lt;a href=&quot;https://www.cultofmac.com/675928/how-to-stop-safari-asking-permission-to-download-everything/&quot;&gt;everybody seems to be annoyed by it, not understand it, and
want to turn it
off&lt;/a&gt;. &lt;a class=&quot;footnote-backref&quot; href=&quot;https://glyph.twistedmatrix.com/feeds/all.atom.xml#fnref:1:never-run-python-in-your-downloads-folder-2020-8&quot; title=&quot;Jump back to footnote 1 in the text&quot;&gt;↩&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;</description>
	<pubDate>Sun, 23 Aug 2020 06:47:00 +0000</pubDate>
</item>
<item>
	<title>Full Stack Python: Using Sentry to Handle Python Exceptions in Django Projects</title>
	<guid>https://www.fullstackpython.com/blog/sentry-handle-exceptions-django-projects.html</guid>
	<link>https://www.fullstackpython.com/blog/sentry-handle-exceptions-django-projects.html</link>
	<description>&lt;p&gt;Web applications built in &lt;a href=&quot;https://www.fullstackpython.com/django.html&quot;&gt;Django&lt;/a&gt; can become sprawlingly complex over time, which is one reason why centralized error handling is important. This tutorial will guide you through adding a free, basic Sentry configuration to a new Django project.&lt;/p&gt;
&lt;p&gt;When we're done, you will be able to view centralized error reports in the Sentry dashboard like you see in this screenshot:&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://www.fullstackpython.com/img/200823-django-sentry/sentry-dashboard.jpg&quot; width=&quot;100%&quot; alt=&quot;Sentry dashboard with caught Django exceptions.&quot; class=&quot;shot rnd outl&quot; /&gt;&lt;/p&gt;
&lt;h2&gt;Tutorial Requirements&lt;/h2&gt;
&lt;p&gt;Throughout this tutorial we are going to use the following dependencies,
which we will install in just a moment. Make sure you also have Python 3,
&lt;a href=&quot;https://www.python.org/downloads/&quot;&gt;preferrably 3.7 or newer installed&lt;/a&gt;,
in your environment:&lt;/p&gt;
&lt;p&gt;We will use the following dependencies to complete this
tutorial:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://www.fullstackpython.com/django.html&quot;&gt;Django&lt;/a&gt; &lt;a href=&quot;https://www.fullstackpython.com/web-frameworks.html&quot;&gt;web framework&lt;/a&gt;,
  &lt;a href=&quot;https://www.djangoproject.com/download/&quot;&gt;version 3.1&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://sentry.io/for/python/&quot;&gt;sentry-sdk&lt;/a&gt;,
  &lt;a href=&quot;https://pypi.org/project/sentry-sdk/&quot;&gt;version 0.16.5&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;All code in this blog post is available open source under the MIT license
on GitHub under the
&lt;a href=&quot;https://github.com/fullstackpython/blog-code-examples&quot;&gt;sentry-handle-exceptions-django-projects directory of the blog-code-examples repository&lt;/a&gt;.
Use the source code as you desire for your own projects.&lt;/p&gt;
&lt;h2&gt;Development environment configuration&lt;/h2&gt;
&lt;p&gt;Change into the directory where you keep your Python
&lt;a href=&quot;https://www.fullstackpython.com/virtual-environments-virtualenvs-venvs.html&quot;&gt;virtual environments&lt;/a&gt;.
Create a new virtualenv for this project using the following
command.&lt;/p&gt;
&lt;p&gt;Start the Django project by creating a new
&lt;a href=&quot;https://www.fullstackpython.com/virtual-environments-virtualenvs-venvs.html&quot;&gt;virtual environment&lt;/a&gt;
using the following command. I recommend using a separate directory
such as &lt;code&gt;~/venvs/&lt;/code&gt; (the tilde is a shortcut for your user's &lt;code&gt;home&lt;/code&gt;
directory) so that you always know where all your virtualenvs are
located.&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;python3 -m venv ~/venvs/djsentry
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Activate the virtualenv with the &lt;code&gt;activate&lt;/code&gt; shell script:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;source&lt;/span&gt; ~/venvs/djsentry/bin/activate
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;After the above command is executed, the command prompt will
change so that the name of the virtualenv is prepended to the
original command prompt format, so if your prompt is simply
&lt;code&gt;$&lt;/code&gt;, it will now look like the following:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;djsentry&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; $
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Remember, you have to activate your virtualenv in every new terminal
window where you want to use dependencies in the virtualenv.&lt;/p&gt;
&lt;p&gt;We can now install the &lt;a href=&quot;https://pypi.org/project/Django/&quot;&gt;Django&lt;/a&gt;
package into the activated but otherwise empty virtualenv.&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;pip install django==3.1 sentry-sdk==0.16.5
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Look for output similar to the following to confirm the appropriate
packages were installed correctly from PyPI.&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;(djsentry) $ pip install django==3.1 sentry-sdk==0.16.5
Collecting django
  Downloading https://files.pythonhosted.org/packages/2b/5a/4bd5624546912082a1bd2709d0edc0685f5c7827a278d806a20cf6adea28/Django-3.1-py3-none-any.whl (7.8MB)
    100% |████████████████████████████████| 7.8MB 6.3MB/s 
Collecting sentry-sdk
  Downloading https://files.pythonhosted.org/packages/f4/4c/49f899856e3a83e02bc88f2c4945aa0bda4f56b804baa9f71e6664a574a2/sentry_sdk-0.16.5-py2.py3-none-any.whl (113kB)
    100% |████████████████████████████████| 122kB 33.7MB/s 
Collecting asgiref~=3.2.10 (from django)
  Using cached https://files.pythonhosted.org/packages/d5/eb/64725b25f991010307fd18a9e0c1f0e6dff2f03622fc4bcbcdb2244f60d6/asgiref-3.2.10-py3-none-any.whl
Collecting sqlparse&amp;gt;=0.2.2 (from django)
  Using cached https://files.pythonhosted.org/packages/85/ee/6e821932f413a5c4b76be9c5936e313e4fc626b33f16e027866e1d60f588/sqlparse-0.3.1-py2.py3-none-any.whl
Collecting pytz (from django)
  Using cached https://files.pythonhosted.org/packages/4f/a4/879454d49688e2fad93e59d7d4efda580b783c745fd2ec2a3adf87b0808d/pytz-2020.1-py2.py3-none-any.whl
Collecting urllib3&amp;gt;=1.10.0 (from sentry-sdk)
  Using cached https://files.pythonhosted.org/packages/9f/f0/a391d1463ebb1b233795cabfc0ef38d3db4442339de68f847026199e69d7/urllib3-1.25.10-py2.py3-none-any.whl
Collecting certifi (from sentry-sdk)
  Using cached https://files.pythonhosted.org/packages/5e/c4/6c4fe722df5343c33226f0b4e0bb042e4dc13483228b4718baf286f86d87/certifi-2020.6.20-py2.py3-none-any.whl
Installing collected packages: asgiref, sqlparse, pytz, django, urllib3, certifi, sentry-sdk
Successfully installed asgiref-3.2.10 certifi-2020.6.20 django-3.1 pytz-2020.1 sentry-sdk-0.16.5 sqlparse-0.3.1 urllib3-1.25.10
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;We can get started coding the application now that we have all of our
required dependencies installed.&lt;/p&gt;
&lt;h2&gt;Coding the initial application&lt;/h2&gt;
&lt;p&gt;We have everything we need to start building our application.&lt;/p&gt;
&lt;p&gt;We can use the &lt;a href=&quot;https://www.fullstackpython.com/django.html&quot;&gt;Django&lt;/a&gt; &lt;code&gt;django-admin&lt;/code&gt; tool to create
the boilerplate code structure to get our project started.
Change into the directory where you develop your applications. For
example, I typically use &lt;code&gt;/Users/matt/devel/py/&lt;/code&gt; for all of my
Python projects. Then run the following command to start a Django
project named &lt;code&gt;djsentry&lt;/code&gt;:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;django-admin.py startproject djsentry
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Note that in this tutorial we are using the same name for both the
virtualenv and the Django project directory, but they can be
different names if you prefer that for organizing your own projects.&lt;/p&gt;
&lt;p&gt;The &lt;code&gt;django-admin&lt;/code&gt; command creates a directory named &lt;code&gt;djsentry&lt;/code&gt;
along with several subdirectories that you should be familiar with
if you have previously worked with Django.&lt;/p&gt;
&lt;p&gt;Change directories into the new project.&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;cd djsentry
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Create a new Django app within &lt;code&gt;djsentry&lt;/code&gt;.&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;python manage.py startapp errors
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Django will generate a new folder named &lt;code&gt;errors&lt;/code&gt; for the project.
We should update the URLs so the app is accessible before we write
our &lt;code&gt;views.py&lt;/code&gt; code.&lt;/p&gt;
&lt;p&gt;Open &lt;code&gt;djsentry/djsentry/urls.py&lt;/code&gt;. Add the highlighted
lines so that URL resolver will check the &lt;code&gt;errors&lt;/code&gt; app
for additional routes to match with URLs that are requested of
this Django application.&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;c1&quot;&gt;# djsentry/djsentry/urls.py&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;~~&lt;/span&gt;&lt;span class=&quot;kn&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;django.conf.urls&lt;/span&gt; &lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;include&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;django.contrib&lt;/span&gt; &lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;admin&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;django.urls&lt;/span&gt; &lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;path&lt;/span&gt;


&lt;span class=&quot;n&quot;&gt;urlpatterns&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;~~&lt;/span&gt;    &lt;span class=&quot;n&quot;&gt;path&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;''&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;include&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'errors.urls'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)),&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;path&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'admin/'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;admin&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;site&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;urls&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Save &lt;code&gt;djsentry/djsentry/urls.py&lt;/code&gt; and open
&lt;code&gt;djsentry/djsentry/settings.py&lt;/code&gt;.
Add the &lt;code&gt;errors&lt;/code&gt; app to &lt;code&gt;settings.py&lt;/code&gt; by inserting
the highlighted line:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;c1&quot;&gt;# djsentry/djsentry/settings.py&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;# Application definition&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;INSTALLED_APPS&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;
    &lt;span class=&quot;s1&quot;&gt;'django.contrib.admin'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;s1&quot;&gt;'django.contrib.auth'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;s1&quot;&gt;'django.contrib.contenttypes'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;s1&quot;&gt;'django.contrib.sessions'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;s1&quot;&gt;'django.contrib.messages'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;s1&quot;&gt;'django.contrib.staticfiles'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;~~&lt;/span&gt;    &lt;span class=&quot;s1&quot;&gt;'errors'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Make sure you change the default &lt;code&gt;DEBUG&lt;/code&gt; and &lt;code&gt;SECRET_KEY&lt;/code&gt;
values in &lt;code&gt;settings.py&lt;/code&gt; before you deploy any code to production. Secure
your app properly with the information from the Django
&lt;a href=&quot;https://docs.djangoproject.com/en/stable/howto/deployment/checklist/&quot;&gt;production deployment checklist&lt;/a&gt;
so that you do not add your project to the list of hacked applications
on the web.&lt;/p&gt;
&lt;p&gt;Save and close &lt;code&gt;settings.py&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Next change into the &lt;code&gt;djsentry/errors&lt;/code&gt; directory. Create
a new file named &lt;code&gt;urls.py&lt;/code&gt; to contain routes for the &lt;code&gt;errors&lt;/code&gt; app.&lt;/p&gt;
&lt;p&gt;Add all of these lines to the empty &lt;code&gt;djsentry/errors/urls.py&lt;/code&gt;
file.&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;c1&quot;&gt;# djsentry/errors/urls.py&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;django.conf.urls&lt;/span&gt; &lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;url&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;.&lt;/span&gt; &lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;views&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;urlpatterns&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;url&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;sa&quot;&gt;r&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'^$'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;views&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;errors_index&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;index&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Save &lt;code&gt;djsentry/errors/urls.py&lt;/code&gt;. Open
&lt;code&gt;djsentry/errors/views.py&lt;/code&gt; to add the
following two highlighted lines. You can keep the boilerplate comment
&quot;# Create your views here.&quot; or delete like I usually do.&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;c1&quot;&gt;# djsentry/errors/views.py&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;django.shortcuts&lt;/span&gt; &lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;render&lt;/span&gt;


&lt;span class=&quot;o&quot;&gt;~~&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;errors_index&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;request&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;~~&lt;/span&gt;    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;render&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;request&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'index.html'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{})&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Next, create a directory for your template files named &lt;code&gt;templates&lt;/code&gt; under
the &lt;code&gt;djmaps/maps&lt;/code&gt; app directory.&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;mkdir templates
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Create a new file named &lt;code&gt;index.html&lt;/code&gt; within
&lt;code&gt;djsentry/errors/templates&lt;/code&gt; that contains the
following &lt;a href=&quot;https://www.fullstackpython.com/django-templates.html&quot;&gt;Django template language&lt;/a&gt; markup.&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;cp&quot;&gt;&amp;lt;!DOCTYPE html&amp;gt;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;html&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;head&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;title&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt;First step for errors&lt;span class=&quot;p&quot;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;title&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;head&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;body&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt;
   &lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;h1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt;Hello, world!&lt;span class=&quot;p&quot;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;h1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;body&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;html&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;We can test out this static page to make sure all of our code is
correct before we start adding the meat of the functionality to
the project. Change into the base directory of your Django project
where the &lt;code&gt;manage.py&lt;/code&gt; file is located. Execute the development
server with the following command:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;python manage.py runserver
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;The Django development server should start up with no issues other than
an unapplied migrations warning.&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;Watching for file changes with StatReloader
Performing system checks...

System check identified no issues (0 silenced).

You have 18 unapplied migration(s). Your project may not work properly until you apply the migrations for app(s): admin, auth, contenttypes, sessions.
Run 'python manage.py migrate' to apply them.
August 15, 2020 - 17:26:57
Django version 3.1, using settings 'djsentry.settings'
Starting development server at http://127.0.0.1:8000/
Quit the server with CONTROL-C.
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Open a web browser and go to &lt;code&gt;localhost:8000&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://www.fullstackpython.com/img/visuals/first-step.jpg&quot; width=&quot;100%&quot; class=&quot;shot rnd outl&quot; alt=&quot;Plain old HTML page saying 'Hello, world!'.&quot; /&gt;&lt;/p&gt;
&lt;p&gt;Our code works, but it sure does not do much yet. Let's add
sentry-sdk so we can understand how it works.&lt;/p&gt;
&lt;h2&gt;Adding Sentry and the sentry-sdk library&lt;/h2&gt;
&lt;p&gt;We can now add Sentry and test it with a bunch of errors to make sure it
is working properly.&lt;/p&gt;
&lt;p&gt;Sentry can either be &lt;a href=&quot;https://github.com/getsentry/onpremise&quot;&gt;self-hosted&lt;/a&gt; or
used as a cloud service through &lt;a href=&quot;https://sentry.io&quot;&gt;Sentry.io&lt;/a&gt;. In this 
tutorial we will use the cloud hosted version because it's faster than
setting up your own server as well as free for smaller projects.&lt;/p&gt;
&lt;p&gt;Go to &lt;a href=&quot;https://sentry.io&quot;&gt;Sentry.io's homepage&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://www.fullstackpython.com/img/200525-sentry/sentry-homepage.jpg&quot; width=&quot;100%&quot; class=&quot;shot rnd outl&quot; alt=&quot;Sentry.io homepage where you can sign up for a free account.&quot; /&gt;&lt;/p&gt;
&lt;p&gt;Sign into your account or sign up for a new free account. You will be at
the main account dashboard after logging in or completing the Sentry sign
up process.&lt;/p&gt;
&lt;p&gt;There are no errors logged on our account dashboard yet, which is as 
expected because we have not yet connected our account to our Django
project.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://www.fullstackpython.com/img/200525-sentry/sentry-empty-dashboard.jpg&quot; width=&quot;100%&quot; class=&quot;shot rnd outl&quot; alt=&quot;Blank Sentry account dashboard.&quot; /&gt;&lt;/p&gt;
&lt;p&gt;Create a new Sentry Project just for this application by clicking
&quot;Projects&quot; in the left sidebar to go to the Projects page.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://www.fullstackpython.com/img/200525-sentry/create-project.jpg&quot; width=&quot;100%&quot; class=&quot;shot rnd outl&quot; alt=&quot;Button to create a new Sentry project.&quot; /&gt;&lt;/p&gt;
&lt;p&gt;On the Projects page, click the &quot;Create Project&quot; button in the top right
corner of the page.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://www.fullstackpython.com/img/200525-sentry/create-new-project-screen.jpg&quot; width=&quot;100%&quot; class=&quot;shot rnd outl&quot; alt=&quot;Create a new Sentry project.&quot; /&gt;&lt;/p&gt;
&lt;p&gt;You can either choose &quot;Django&quot; or select &quot;Python&quot;. I usually just choose 
&quot;Python&quot; if I do not yet know what framework I'll be using to build my 
application. Next, give your new Project a name and then press the &quot;Create 
Project&quot; button. Our new project is ready to integrate with our Python code.&lt;/p&gt;
&lt;p&gt;We need the unique identifier for our account and project to authorize our
Python code to send errors to this Sentry instance. The easiest way to get
what we need is to go to the 
&lt;a href=&quot;https://docs.sentry.io/platforms/python/django/&quot;&gt;Python+Django documentation page&lt;/a&gt;
and read how to configure the SDK.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://www.fullstackpython.com/img/200525-sentry/python-sentry-quickstart.jpg&quot; width=&quot;100%&quot; class=&quot;shot rnd outl&quot; alt=&quot;The Sentry docs show you exactly what you need to export to connect to your account.&quot; /&gt; &lt;/p&gt;
&lt;p&gt;Copy the string parameter for the &lt;code&gt;init&lt;/code&gt; method and set it
&lt;a href=&quot;https://www.twilio.com/blog/2017/01/how-to-set-environment-variables.html&quot;&gt;as an environment variable&lt;/a&gt;
rather than having it exposed in your project's code.&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;export&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;SENTRY_DSN&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'https://yourkeygoeshere.ingest.sentry.io/project-number'&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;strong&gt;Make sure to replace &quot;yourkeygoeshere&quot; with your own unique identifier
and &quot;project-number&quot; with the ID that matches the project you just
created.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Check that the &lt;code&gt;SENTRY_DSN&lt;/code&gt; is set properly in your shell using the &lt;code&gt;echo&lt;/code&gt;
command:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$SENTRY_DSN&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Next, update &lt;code&gt;settings.py&lt;/code&gt; with the following highlighted new lines:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;c1&quot;&gt;# settings.py&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;~~&lt;/span&gt;&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;os&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;~~&lt;/span&gt;&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;sentry_sdk&lt;/span&gt;

&lt;span class=&quot;kn&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;pathlib&lt;/span&gt; &lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Path&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;~~&lt;/span&gt;&lt;span class=&quot;kn&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;sentry_sdk.integrations.django&lt;/span&gt; &lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;DjangoIntegration&lt;/span&gt;


&lt;span class=&quot;c1&quot;&gt;# Build paths inside the project like this: BASE_DIR / 'subdir'.&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;BASE_DIR&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Path&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;vm&quot;&gt;__file__&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;resolve&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;strict&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;True&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;parent&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;parent&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;At the bottom of the file after the line with &lt;code&gt;STATIC_URL&lt;/code&gt;, add the
Sentry configuration:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;STATIC_URL&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'/static/'&lt;/span&gt;

&lt;span class=&quot;o&quot;&gt;~~&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sentry_sdk&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;init&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;~~&lt;/span&gt;    &lt;span class=&quot;n&quot;&gt;dsn&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;os&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;getenv&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'SENTRY_DSN'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;~~&lt;/span&gt;    &lt;span class=&quot;n&quot;&gt;integrations&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;DjangoIntegration&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()],&lt;/span&gt;

&lt;span class=&quot;o&quot;&gt;~~&lt;/span&gt;    &lt;span class=&quot;c1&quot;&gt;# If you wish to associate users to errors (assuming you are using&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;~~&lt;/span&gt;    &lt;span class=&quot;c1&quot;&gt;# django.contrib.auth) you may enable sending PII data.&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;~~&lt;/span&gt;    &lt;span class=&quot;n&quot;&gt;send_default_pii&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;True&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;~~&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Now that we have the configuration in place we can deliberately make some
errors happen to test the connection to Sentry's service.&lt;/p&gt;
&lt;h2&gt;Testing Sentry's error catching&lt;/h2&gt;
&lt;p&gt;We'll change some of the existing code to deliberately throw exceptions
to make sure everything is working properly.&lt;/p&gt;
&lt;p&gt;Start by opening &lt;code&gt;errors/views.py&lt;/code&gt; and updating it with one new
highlighted line that will automatically throw a generic Exception
when this function is called.&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;c1&quot;&gt;# djsentry/errors/views.py&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;django.shortcuts&lt;/span&gt; &lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;render&lt;/span&gt;


&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;errors_index&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;request&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;~~&lt;/span&gt;    &lt;span class=&quot;k&quot;&gt;raise&lt;/span&gt; &lt;span class=&quot;ne&quot;&gt;Exception&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'testing exception'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;render&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;request&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'index.html'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{})&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Go to &lt;code&gt;localhost:8000&lt;/code&gt; in your browser and you will immediately get this
exception page when running the development server:&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://www.fullstackpython.com/img/200823-django-sentry/exception-thrown-debug-page.jpg&quot; width=&quot;100%&quot; alt=&quot;Django development mode debug page when the Exception is raised.&quot; class=&quot;shot rnd outl&quot; /&gt;&lt;/p&gt;
&lt;p&gt;We can also try out code that does not simply raise an exception but instead
will definitely create one when executed, like this division by zero 
operation:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;c1&quot;&gt;# djsentry/errors/views.py&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;django.shortcuts&lt;/span&gt; &lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;render&lt;/span&gt;


&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;errors_index&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;request&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;~~&lt;/span&gt;    &lt;span class=&quot;n&quot;&gt;division_by_zero&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;/&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;render&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;request&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'index.html'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{})&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;img src=&quot;https://www.fullstackpython.com/img/200823-django-sentry/division-by-zero-exception.jpg&quot; width=&quot;100%&quot; alt=&quot;Django development mode debug page when the Exception occurs.&quot; class=&quot;shot rnd outl&quot; /&gt;&lt;/p&gt;
&lt;p&gt;If those exceptions both appear in the Sentry dashboard like this, you're all
set:&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://www.fullstackpython.com/img/200823-django-sentry/sentry-dashboard.jpg&quot; width=&quot;100%&quot; alt=&quot;Sentry dashboard with the exceptions that just occurred..&quot; class=&quot;shot rnd outl&quot; /&gt;&lt;/p&gt;
&lt;p&gt;The above exceptions were just a couple of generic ways to test that everything
is working to send error information to Sentry. This configuration will
also handle the 
&lt;a href=&quot;https://docs.djangoproject.com/en/stable/ref/exceptions/&quot;&gt;many other Django exceptions&lt;/a&gt;
you are likely to see when building the rest of your Django project.&lt;/p&gt;
&lt;h2&gt;Additional resources&lt;/h2&gt;
&lt;p&gt;We just finished building a Django project that uses Sentry for 
centralized error handling.&lt;/p&gt;
&lt;p&gt;Next, try out some of these other related &lt;a href=&quot;https://www.fullstackpython.com/django.html&quot;&gt;Django&lt;/a&gt; tutorials:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://www.fullstackpython.com/blog/track-daily-user-data-django-user-visit.html&quot;&gt;Tracking Daily User Data in Django with django-user-visit&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://www.fullstackpython.com/blog/bootstrap-4-django-template.html&quot;&gt;Quickly Use Bootstrap 4 in a Django Template with a CDN&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://www.fullstackpython.com/blog/maps-django-web-applications-projects-mapbox.html&quot;&gt;How to Add Maps to Django Web App Projects with Mapbox&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;If you have questions or comments about this tutorial, please contact me
via Twitter &lt;a href=&quot;https://twitter.com/fullstackpython&quot;&gt;@fullstackpython&lt;/a&gt;, or
on GitHub &lt;a href=&quot;https://github.com/mattmakai&quot;&gt;@mattmakai&lt;/a&gt;.
See something wrong with this post? Fork
&lt;a href=&quot;https://github.com/mattmakai/fullstackpython.com/blob/master/content/posts/200823-sentry-handle-exceptions-django-projects.markdown&quot;&gt;this page's source on GitHub&lt;/a&gt;
and submit a pull request.&lt;/p&gt;</description>
	<pubDate>Sun, 23 Aug 2020 04:00:00 +0000</pubDate>
</item>
<item>
	<title>PSF GSoC students blogs: Week 7 Check-in</title>
	<guid>https://blogs.python-gsoc.org/en/wangjls-blog/week-7-check-in-4/</guid>
	<link>https://blogs.python-gsoc.org/en/wangjls-blog/week-7-check-in-4/</link>
	<description>&lt;p&gt;&lt;strong&gt;What I have done this week&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;1. Made changes on the PR(Split the multistage dockerfile for build) and after discussion with my mentor, my PR was merged. &lt;/p&gt;

&lt;p&gt;2. Rebased the PR(Analyze multistage dockerfile) to the latest branch. This draft PR is used to test the functionality and if it works, i will split it into small steps to implement it. So i will keep working on this issue after GSoC.&lt;/p&gt;

&lt;p&gt;3. Discussed with my mentor on the final evaluation and made preparation on it. I will write a blog here to present my work this summer.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Next week&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Finish my final evaluation.&lt;/p&gt;</description>
	<pubDate>Sun, 23 Aug 2020 03:37:48 +0000</pubDate>
</item>
<item>
	<title>Catalin George Festila: Python 3.8.5 : Testing with openpyxl - parts 001 .</title>
	<guid>http://python-catalin.blogspot.com/2020/08/python-385-testing-with-openpyxl-parts.html</guid>
	<link>http://python-catalin.blogspot.com/2020/08/python-385-testing-with-openpyxl-parts.html</link>
	<description>The Python executes the code line by line because is an interpreter language.
This allows users to solve issues in the programming area, fast and easy.
I use python versiono 3.8.5 build on Aug 12 2020 at 00:00:00, see the result of interactive mode:
[mythcat@desk ~]$ python
Python 3.8.5 (default, Aug 12 2020, 00:00:00) 
[GCC 10.2.1 20200723 (Red Hat 10.2.1-1)] on linux
Type &quot;help&quot;, &quot;copyright&quot;, &quot;</description>
	<pubDate>Sun, 23 Aug 2020 03:08:52 +0000</pubDate>
</item>
<item>
	<title>Catalin George Festila: Python 3.8.5 : Testing the pyre tool  - parts 001.</title>
	<guid>http://python-catalin.blogspot.com/2020/08/python-385-testing-pyre-tool-parts-001.html</guid>
	<link>http://python-catalin.blogspot.com/2020/08/python-385-testing-pyre-tool-parts-001.html</link>
	<description>The Pyre is a static analysis tool to detect and prevent security issues in Python code that can be found on the official website.
The Pyre tool supports the Language Server Protocol and has an extension for VSCode.
The team development comes at August 7, 2020, with this intro:
Pyre is a performant type checker for Python. Statically typing what are essentially fully dynamic languages has a long</description>
	<pubDate>Sat, 22 Aug 2020 13:30:18 +0000</pubDate>
</item>
<item>
	<title>Ned Batchelder: Do a pile of work better</title>
	<guid>https://nedbatchelder.com//blog/202008/do_a_pile_of_work_better.html</guid>
	<link>https://nedbatchelder.com//blog/202008/do_a_pile_of_work_better.html</link>
	<description>&lt;p&gt;A few days ago I wrote about
&lt;a href=&quot;https://nedbatchelder.com/blog/202008/do_a_pile_of_work.html&quot;&gt;doing a pile of work&lt;/a&gt; with
concurrent.futures.  Since then, I discovered a problem with the code:
exceptions raised by the work function were silently ignored.&lt;/p&gt;&lt;p&gt;Here&amp;#8217;s the improved code that logs exceptions:&lt;/p&gt;&lt;blockquote class=&quot;code&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt;&amp;#xA0;&lt;span class=&quot;nf&quot;&gt;wait_first&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;futures&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
&lt;br /&gt;&amp;#xA0;&amp;#xA0;&amp;#xA0;&amp;#xA0;&lt;span class=&quot;sd&quot;&gt;&amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;
&lt;br /&gt;&lt;span class=&quot;sd&quot;&gt;&amp;#xA0;&amp;#xA0;&amp;#xA0;&amp;#xA0;Wait&amp;#xA0;for&amp;#xA0;the&amp;#xA0;first&amp;#xA0;future&amp;#xA0;to&amp;#xA0;complete.&lt;/span&gt;
&lt;br /&gt;
&lt;br /&gt;&lt;span class=&quot;sd&quot;&gt;&amp;#xA0;&amp;#xA0;&amp;#xA0;&amp;#xA0;Returns:&lt;/span&gt;
&lt;br /&gt;&lt;span class=&quot;sd&quot;&gt;&amp;#xA0;&amp;#xA0;&amp;#xA0;&amp;#xA0;&amp;#xA0;&amp;#xA0;&amp;#xA0;&amp;#xA0;(done,&amp;#xA0;not_done):&amp;#xA0;two&amp;#xA0;sets&amp;#xA0;of&amp;#xA0;futures.&lt;/span&gt;
&lt;br /&gt;
&lt;br /&gt;&lt;span class=&quot;sd&quot;&gt;&amp;#xA0;&amp;#xA0;&amp;#xA0;&amp;#xA0;&amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;
&lt;br /&gt;&amp;#xA0;&amp;#xA0;&amp;#xA0;&amp;#xA0;&lt;span class=&quot;k&quot;&gt;return&lt;/span&gt;&amp;#xA0;&lt;span class=&quot;n&quot;&gt;cf&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;wait&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;futures&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&amp;#xA0;&lt;span class=&quot;n&quot;&gt;return_when&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cf&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;FIRST_COMPLETED&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;br /&gt;
&lt;br /&gt;&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt;&amp;#xA0;&lt;span class=&quot;nf&quot;&gt;do_work&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;threads&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&amp;#xA0;&lt;span class=&quot;n&quot;&gt;argsfn&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&amp;#xA0;&lt;span class=&quot;n&quot;&gt;workfn&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
&lt;br /&gt;&amp;#xA0;&amp;#xA0;&amp;#xA0;&amp;#xA0;&lt;span class=&quot;sd&quot;&gt;&amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;
&lt;br /&gt;&lt;span class=&quot;sd&quot;&gt;&amp;#xA0;&amp;#xA0;&amp;#xA0;&amp;#xA0;Do&amp;#xA0;a&amp;#xA0;pile&amp;#xA0;of&amp;#xA0;work,&amp;#xA0;maybe&amp;#xA0;in&amp;#xA0;threads,&amp;#xA0;with&amp;#xA0;a&amp;#xA0;progress&amp;#xA0;bar.&lt;/span&gt;
&lt;br /&gt;
&lt;br /&gt;&lt;span class=&quot;sd&quot;&gt;&amp;#xA0;&amp;#xA0;&amp;#xA0;&amp;#xA0;Two&amp;#xA0;callables&amp;#xA0;are&amp;#xA0;provided:&amp;#xA0;`workfn`&amp;#xA0;is&amp;#xA0;the&amp;#xA0;unit&amp;#xA0;of&amp;#xA0;work&amp;#xA0;to&amp;#xA0;be&amp;#xA0;done,&lt;/span&gt;
&lt;br /&gt;&lt;span class=&quot;sd&quot;&gt;&amp;#xA0;&amp;#xA0;&amp;#xA0;&amp;#xA0;many&amp;#xA0;times.&amp;#xA0;&amp;#xA0;Its&amp;#xA0;arguments&amp;#xA0;are&amp;#xA0;provided&amp;#xA0;by&amp;#xA0;calling&amp;#xA0;`argsfn`,&amp;#xA0;which&lt;/span&gt;
&lt;br /&gt;&lt;span class=&quot;sd&quot;&gt;&amp;#xA0;&amp;#xA0;&amp;#xA0;&amp;#xA0;must&amp;#xA0;produce&amp;#xA0;a&amp;#xA0;sequence&amp;#xA0;of&amp;#xA0;tuples.&amp;#xA0;&amp;#xA0;`argsfn`&amp;#xA0;will&amp;#xA0;be&amp;#xA0;called&amp;#xA0;a&amp;#xA0;few&lt;/span&gt;
&lt;br /&gt;&lt;span class=&quot;sd&quot;&gt;&amp;#xA0;&amp;#xA0;&amp;#xA0;&amp;#xA0;times,&amp;#xA0;and&amp;#xA0;must&amp;#xA0;produce&amp;#xA0;the&amp;#xA0;same&amp;#xA0;sequence&amp;#xA0;each&amp;#xA0;time.&lt;/span&gt;
&lt;br /&gt;
&lt;br /&gt;&lt;span class=&quot;sd&quot;&gt;&amp;#xA0;&amp;#xA0;&amp;#xA0;&amp;#xA0;Args:&lt;/span&gt;
&lt;br /&gt;&lt;span class=&quot;sd&quot;&gt;&amp;#xA0;&amp;#xA0;&amp;#xA0;&amp;#xA0;&amp;#xA0;&amp;#xA0;&amp;#xA0;&amp;#xA0;threads:&amp;#xA0;the&amp;#xA0;number&amp;#xA0;of&amp;#xA0;threads&amp;#xA0;to&amp;#xA0;use.&lt;/span&gt;
&lt;br /&gt;&lt;span class=&quot;sd&quot;&gt;&amp;#xA0;&amp;#xA0;&amp;#xA0;&amp;#xA0;&amp;#xA0;&amp;#xA0;&amp;#xA0;&amp;#xA0;argsfn:&amp;#xA0;a&amp;#xA0;callable&amp;#xA0;that&amp;#xA0;produces&amp;#xA0;tuples,&amp;#xA0;the&amp;#xA0;arguments&amp;#xA0;to&amp;#xA0;`workfn`.&lt;/span&gt;
&lt;br /&gt;&lt;span class=&quot;sd&quot;&gt;&amp;#xA0;&amp;#xA0;&amp;#xA0;&amp;#xA0;&amp;#xA0;&amp;#xA0;&amp;#xA0;&amp;#xA0;workfn:&amp;#xA0;a&amp;#xA0;callable&amp;#xA0;that&amp;#xA0;does&amp;#xA0;work.&lt;/span&gt;
&lt;br /&gt;
&lt;br /&gt;&lt;span class=&quot;sd&quot;&gt;&amp;#xA0;&amp;#xA0;&amp;#xA0;&amp;#xA0;&amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;
&lt;br /&gt;&amp;#xA0;&amp;#xA0;&amp;#xA0;&amp;#xA0;&lt;span class=&quot;n&quot;&gt;total&lt;/span&gt;&amp;#xA0;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&amp;#xA0;&lt;span class=&quot;nb&quot;&gt;sum&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&amp;#xA0;&lt;span class=&quot;k&quot;&gt;for&lt;/span&gt;&amp;#xA0;&lt;span class=&quot;n&quot;&gt;_&lt;/span&gt;&amp;#xA0;&lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt;&amp;#xA0;&lt;span class=&quot;n&quot;&gt;argsfn&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;())&lt;/span&gt;
&lt;br /&gt;&amp;#xA0;&amp;#xA0;&amp;#xA0;&amp;#xA0;&lt;span class=&quot;k&quot;&gt;with&lt;/span&gt;&amp;#xA0;&lt;span class=&quot;n&quot;&gt;tqdm&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;total&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;total&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&amp;#xA0;&lt;span class=&quot;n&quot;&gt;smoothing&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mf&quot;&gt;0.02&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&amp;#xA0;&lt;span class=&quot;k&quot;&gt;as&lt;/span&gt;&amp;#xA0;&lt;span class=&quot;n&quot;&gt;progressbar&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
&lt;br /&gt;&amp;#xA0;&amp;#xA0;&amp;#xA0;&amp;#xA0;&amp;#xA0;&amp;#xA0;&amp;#xA0;&amp;#xA0;&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt;&amp;#xA0;&lt;span class=&quot;n&quot;&gt;threads&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
&lt;br /&gt;&amp;#xA0;&amp;#xA0;&amp;#xA0;&amp;#xA0;&amp;#xA0;&amp;#xA0;&amp;#xA0;&amp;#xA0;&amp;#xA0;&amp;#xA0;&amp;#xA0;&amp;#xA0;&lt;span class=&quot;n&quot;&gt;limit&lt;/span&gt;&amp;#xA0;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&amp;#xA0;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&amp;#xA0;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&amp;#xA0;&lt;span class=&quot;n&quot;&gt;threads&lt;/span&gt;
&lt;br /&gt;&amp;#xA0;&amp;#xA0;&amp;#xA0;&amp;#xA0;&amp;#xA0;&amp;#xA0;&amp;#xA0;&amp;#xA0;&amp;#xA0;&amp;#xA0;&amp;#xA0;&amp;#xA0;&lt;span class=&quot;n&quot;&gt;not_done&lt;/span&gt;&amp;#xA0;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&amp;#xA0;&lt;span class=&quot;nb&quot;&gt;set&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;br /&gt;
&lt;br /&gt;&amp;#xA0;&amp;#xA0;&amp;#xA0;&amp;#xA0;&amp;#xA0;&amp;#xA0;&amp;#xA0;&amp;#xA0;&amp;#xA0;&amp;#xA0;&amp;#xA0;&amp;#xA0;&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt;&amp;#xA0;&lt;span class=&quot;nf&quot;&gt;finish_some&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;():&lt;/span&gt;
&lt;br /&gt;&amp;#xA0;&amp;#xA0;&amp;#xA0;&amp;#xA0;&amp;#xA0;&amp;#xA0;&amp;#xA0;&amp;#xA0;&amp;#xA0;&amp;#xA0;&amp;#xA0;&amp;#xA0;&amp;#xA0;&amp;#xA0;&amp;#xA0;&amp;#xA0;&lt;span class=&quot;n&quot;&gt;nonlocal&lt;/span&gt;&amp;#xA0;&lt;span class=&quot;n&quot;&gt;not_done&lt;/span&gt;
&lt;br /&gt;&amp;#xA0;&amp;#xA0;&amp;#xA0;&amp;#xA0;&amp;#xA0;&amp;#xA0;&amp;#xA0;&amp;#xA0;&amp;#xA0;&amp;#xA0;&amp;#xA0;&amp;#xA0;&amp;#xA0;&amp;#xA0;&amp;#xA0;&amp;#xA0;&lt;span class=&quot;n&quot;&gt;done&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&amp;#xA0;&lt;span class=&quot;n&quot;&gt;not_done&lt;/span&gt;&amp;#xA0;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&amp;#xA0;&lt;span class=&quot;n&quot;&gt;wait_first&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;not_done&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;br /&gt;&amp;#xA0;&amp;#xA0;&amp;#xA0;&amp;#xA0;&amp;#xA0;&amp;#xA0;&amp;#xA0;&amp;#xA0;&amp;#xA0;&amp;#xA0;&amp;#xA0;&amp;#xA0;&amp;#xA0;&amp;#xA0;&amp;#xA0;&amp;#xA0;&lt;span class=&quot;k&quot;&gt;for&lt;/span&gt;&amp;#xA0;&lt;span class=&quot;n&quot;&gt;done_future&lt;/span&gt;&amp;#xA0;&lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt;&amp;#xA0;&lt;span class=&quot;n&quot;&gt;done&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
&lt;br /&gt;&amp;#xA0;&amp;#xA0;&amp;#xA0;&amp;#xA0;&amp;#xA0;&amp;#xA0;&amp;#xA0;&amp;#xA0;&amp;#xA0;&amp;#xA0;&amp;#xA0;&amp;#xA0;&amp;#xA0;&amp;#xA0;&amp;#xA0;&amp;#xA0;&amp;#xA0;&amp;#xA0;&amp;#xA0;&amp;#xA0;&lt;span class=&quot;n&quot;&gt;exc&lt;/span&gt;&amp;#xA0;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&amp;#xA0;&lt;span class=&quot;n&quot;&gt;done_future&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;exception&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;br /&gt;&amp;#xA0;&amp;#xA0;&amp;#xA0;&amp;#xA0;&amp;#xA0;&amp;#xA0;&amp;#xA0;&amp;#xA0;&amp;#xA0;&amp;#xA0;&amp;#xA0;&amp;#xA0;&amp;#xA0;&amp;#xA0;&amp;#xA0;&amp;#xA0;&amp;#xA0;&amp;#xA0;&amp;#xA0;&amp;#xA0;&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt;&amp;#xA0;&lt;span class=&quot;n&quot;&gt;exc&lt;/span&gt;&amp;#xA0;&lt;span class=&quot;ow&quot;&gt;is&lt;/span&gt;&amp;#xA0;&lt;span class=&quot;ow&quot;&gt;not&lt;/span&gt;&amp;#xA0;&lt;span class=&quot;bp&quot;&gt;None&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
&lt;br /&gt;&amp;#xA0;&amp;#xA0;&amp;#xA0;&amp;#xA0;&amp;#xA0;&amp;#xA0;&amp;#xA0;&amp;#xA0;&amp;#xA0;&amp;#xA0;&amp;#xA0;&amp;#xA0;&amp;#xA0;&amp;#xA0;&amp;#xA0;&amp;#xA0;&amp;#xA0;&amp;#xA0;&amp;#xA0;&amp;#xA0;&amp;#xA0;&amp;#xA0;&amp;#xA0;&amp;#xA0;&lt;span class=&quot;n&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;error&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;Failed&amp;#xA0;future:&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&amp;#xA0;&lt;span class=&quot;n&quot;&gt;exc_info&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;exc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;br /&gt;&amp;#xA0;&amp;#xA0;&amp;#xA0;&amp;#xA0;&amp;#xA0;&amp;#xA0;&amp;#xA0;&amp;#xA0;&amp;#xA0;&amp;#xA0;&amp;#xA0;&amp;#xA0;&amp;#xA0;&amp;#xA0;&amp;#xA0;&amp;#xA0;&lt;span class=&quot;n&quot;&gt;progressbar&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;update&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;len&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;done&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
&lt;br /&gt;
&lt;br /&gt;&amp;#xA0;&amp;#xA0;&amp;#xA0;&amp;#xA0;&amp;#xA0;&amp;#xA0;&amp;#xA0;&amp;#xA0;&amp;#xA0;&amp;#xA0;&amp;#xA0;&amp;#xA0;&lt;span class=&quot;k&quot;&gt;with&lt;/span&gt;&amp;#xA0;&lt;span class=&quot;n&quot;&gt;cf&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ThreadPoolExecutor&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;max_workers&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;threads&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&amp;#xA0;&lt;span class=&quot;k&quot;&gt;as&lt;/span&gt;&amp;#xA0;&lt;span class=&quot;n&quot;&gt;executor&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
&lt;br /&gt;&amp;#xA0;&amp;#xA0;&amp;#xA0;&amp;#xA0;&amp;#xA0;&amp;#xA0;&amp;#xA0;&amp;#xA0;&amp;#xA0;&amp;#xA0;&amp;#xA0;&amp;#xA0;&amp;#xA0;&amp;#xA0;&amp;#xA0;&amp;#xA0;&lt;span class=&quot;k&quot;&gt;for&lt;/span&gt;&amp;#xA0;&lt;span class=&quot;n&quot;&gt;args&lt;/span&gt;&amp;#xA0;&lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt;&amp;#xA0;&lt;span class=&quot;n&quot;&gt;argsfn&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;():&lt;/span&gt;
&lt;br /&gt;&amp;#xA0;&amp;#xA0;&amp;#xA0;&amp;#xA0;&amp;#xA0;&amp;#xA0;&amp;#xA0;&amp;#xA0;&amp;#xA0;&amp;#xA0;&amp;#xA0;&amp;#xA0;&amp;#xA0;&amp;#xA0;&amp;#xA0;&amp;#xA0;&amp;#xA0;&amp;#xA0;&amp;#xA0;&amp;#xA0;&lt;span class=&quot;k&quot;&gt;while&lt;/span&gt;&amp;#xA0;&lt;span class=&quot;nb&quot;&gt;len&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;not_done&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&amp;#xA0;&lt;span class=&quot;o&quot;&gt;&amp;gt;=&lt;/span&gt;&amp;#xA0;&lt;span class=&quot;n&quot;&gt;limit&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
&lt;br /&gt;&amp;#xA0;&amp;#xA0;&amp;#xA0;&amp;#xA0;&amp;#xA0;&amp;#xA0;&amp;#xA0;&amp;#xA0;&amp;#xA0;&amp;#xA0;&amp;#xA0;&amp;#xA0;&amp;#xA0;&amp;#xA0;&amp;#xA0;&amp;#xA0;&amp;#xA0;&amp;#xA0;&amp;#xA0;&amp;#xA0;&amp;#xA0;&amp;#xA0;&amp;#xA0;&amp;#xA0;&lt;span class=&quot;n&quot;&gt;finish_some&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;br /&gt;&amp;#xA0;&amp;#xA0;&amp;#xA0;&amp;#xA0;&amp;#xA0;&amp;#xA0;&amp;#xA0;&amp;#xA0;&amp;#xA0;&amp;#xA0;&amp;#xA0;&amp;#xA0;&amp;#xA0;&amp;#xA0;&amp;#xA0;&amp;#xA0;&amp;#xA0;&amp;#xA0;&amp;#xA0;&amp;#xA0;&lt;span class=&quot;n&quot;&gt;not_done&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;add&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;executor&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;submit&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;workfn&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&amp;#xA0;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;args&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
&lt;br /&gt;&amp;#xA0;&amp;#xA0;&amp;#xA0;&amp;#xA0;&amp;#xA0;&amp;#xA0;&amp;#xA0;&amp;#xA0;&amp;#xA0;&amp;#xA0;&amp;#xA0;&amp;#xA0;&amp;#xA0;&amp;#xA0;&amp;#xA0;&amp;#xA0;&lt;span class=&quot;k&quot;&gt;while&lt;/span&gt;&amp;#xA0;&lt;span class=&quot;n&quot;&gt;not_done&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
&lt;br /&gt;&amp;#xA0;&amp;#xA0;&amp;#xA0;&amp;#xA0;&amp;#xA0;&amp;#xA0;&amp;#xA0;&amp;#xA0;&amp;#xA0;&amp;#xA0;&amp;#xA0;&amp;#xA0;&amp;#xA0;&amp;#xA0;&amp;#xA0;&amp;#xA0;&amp;#xA0;&amp;#xA0;&amp;#xA0;&amp;#xA0;&lt;span class=&quot;n&quot;&gt;finish_some&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;br /&gt;&amp;#xA0;&amp;#xA0;&amp;#xA0;&amp;#xA0;&amp;#xA0;&amp;#xA0;&amp;#xA0;&amp;#xA0;&lt;span class=&quot;k&quot;&gt;else&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
&lt;br /&gt;&amp;#xA0;&amp;#xA0;&amp;#xA0;&amp;#xA0;&amp;#xA0;&amp;#xA0;&amp;#xA0;&amp;#xA0;&amp;#xA0;&amp;#xA0;&amp;#xA0;&amp;#xA0;&lt;span class=&quot;k&quot;&gt;for&lt;/span&gt;&amp;#xA0;&lt;span class=&quot;n&quot;&gt;args&lt;/span&gt;&amp;#xA0;&lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt;&amp;#xA0;&lt;span class=&quot;n&quot;&gt;argsfn&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;():&lt;/span&gt;
&lt;br /&gt;&amp;#xA0;&amp;#xA0;&amp;#xA0;&amp;#xA0;&amp;#xA0;&amp;#xA0;&amp;#xA0;&amp;#xA0;&amp;#xA0;&amp;#xA0;&amp;#xA0;&amp;#xA0;&amp;#xA0;&amp;#xA0;&amp;#xA0;&amp;#xA0;&lt;span class=&quot;n&quot;&gt;workfn&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;args&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;br /&gt;&amp;#xA0;&amp;#xA0;&amp;#xA0;&amp;#xA0;&amp;#xA0;&amp;#xA0;&amp;#xA0;&amp;#xA0;&amp;#xA0;&amp;#xA0;&amp;#xA0;&amp;#xA0;&amp;#xA0;&amp;#xA0;&amp;#xA0;&amp;#xA0;&lt;span class=&quot;n&quot;&gt;progressbar&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;update&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;br /&gt;&lt;/code&gt;&lt;/blockquote&gt;&lt;p&gt;This might also be the first time I&amp;#8217;ve used &amp;#8220;nonlocal&amp;#8221; in real code...&lt;/p&gt;</description>
	<pubDate>Sat, 22 Aug 2020 10:55:00 +0000</pubDate>
</item>
<item>
	<title>Andre Roberge: What, where, why?</title>
	<guid>https://aroberge.blogspot.com/2020/08/what-where-why.html</guid>
	<link>https://aroberge.blogspot.com/2020/08/what-where-why.html</link>
	<description>&lt;p&gt;&amp;nbsp;&lt;/p&gt;&lt;div class=&quot;separator&quot;&gt;&lt;a href=&quot;https://1.bp.blogspot.com/-OVjGz2-YRFY/X0D9zGazhsI/AAAAAAAAGNY/cRPEHDyzSc4JsDf5w5O9xCuTbTha7aVnACLcBGAsYHQ/s1856/what_where_why.png&quot;&gt;&lt;img border=&quot;0&quot; src=&quot;https://1.bp.blogspot.com/-OVjGz2-YRFY/X0D9zGazhsI/AAAAAAAAGNY/cRPEHDyzSc4JsDf5w5O9xCuTbTha7aVnACLcBGAsYHQ/s640/what_where_why.png&quot; width=&quot;640&quot; /&gt;&lt;/a&gt;&lt;/div&gt;&lt;div class=&quot;separator&quot;&gt;&lt;br /&gt;&lt;/div&gt;&lt;div class=&quot;separator&quot;&gt;I do need to document this ...&lt;/div&gt;&lt;p&gt;&lt;/p&gt;</description>
	<pubDate>Sat, 22 Aug 2020 08:14:34 +0000</pubDate>
</item>
<item>
	<title>PSF GSoC students blogs: [Week 12] Check-in</title>
	<guid>https://blogs.python-gsoc.org/en/sangyxs-blog/week-12-check-in/</guid>
	<link>https://blogs.python-gsoc.org/en/sangyxs-blog/week-12-check-in/</link>
	<description>&lt;h2&gt;1. What did you do this week?&lt;/h2&gt;

&lt;ul&gt;
	&lt;li&gt;
	&lt;p&gt;Fix repeat_to_match_shape &amp;amp; grad_broadcast_to.&lt;/p&gt;
	&lt;/li&gt;
	&lt;li&gt;
	&lt;p&gt;Clean code &amp;amp; move unimplement code to dev.&lt;/p&gt;
	&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;2. Difficulty&lt;/h2&gt;

&lt;p&gt;No difficulties this week.&lt;/p&gt;

&lt;h2&gt;3. What is coming up next?&lt;/h2&gt;

&lt;ul&gt;
	&lt;li&gt;Publish udiff on pypi.&lt;/li&gt;
	&lt;li&gt;Complete jvp.&lt;/li&gt;
	&lt;li&gt;Add linalg.&lt;/li&gt;
	&lt;li&gt;Add more document.&lt;/li&gt;
&lt;/ul&gt;</description>
	<pubDate>Sat, 22 Aug 2020 08:00:55 +0000</pubDate>
</item>
<item>
	<title>PSF GSoC students blogs: Weekly Check In - 11</title>
	<guid>https://blogs.python-gsoc.org/en/adityaa30s-blog/weekly-check-in-11-6/</guid>
	<link>https://blogs.python-gsoc.org/en/adityaa30s-blog/weekly-check-in-11-6/</link>
	<description>&lt;h2&gt;What did I do till now?&lt;/h2&gt;

&lt;p&gt;Last week, I finished finalizing the PR for the basic implementation of the &lt;strong&gt;H2ClientProtocol&lt;/strong&gt;. The protocol now works with all the request methods except the &lt;strong&gt;CONNECT &lt;/strong&gt;method. The work on Tunneling using CONNECT method is still in progress. I started with creating another protocol for negotiation which uses ALPN or NPN (whichever is available) to negotiate a protocol (presently one of HTTP/1.1 or HTTP/2) from the remote server based on the priority given by the user via the Scrapy project's settings and then uses the respective download handler to complete the request. &lt;/p&gt;

&lt;h2&gt;What's coming up next? &lt;/h2&gt;

&lt;p&gt;This week I am majorly working on finishing the Negotiation Protocol.&lt;/p&gt;

&lt;h2&gt;Did I get stuck anywhere?&lt;/h2&gt;

&lt;p&gt;Nope. I spent more time on finalizing a clean architure last week so mostly my time went in planning. Apart from that there were no major blockers :) &lt;/p&gt;</description>
	<pubDate>Sat, 22 Aug 2020 07:38:04 +0000</pubDate>
</item>
<item>
	<title>Daniel Roy Greenfeld: It's the Weekend, Let's Code a Python Project!</title>
	<guid></guid>
	<link></link>
	<description>&lt;p&gt;It's Friday where I am, maybe Saturday wherever you are. And like me, you're wondering what you are going to code over the weekend. Why code over the weekend? Here are some good reasons:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;You want to practice your Python to level up your skills&lt;/li&gt;
&lt;li&gt;Potential employees are asking for portfolio work and your GitHub account is bare&lt;/li&gt;
&lt;li&gt;Coding in Python is fun!&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Well, wonder no further because I just helped &lt;a href=&quot;https://yasoob.me/&quot;&gt;Yasoob Khalid&lt;/a&gt; of &lt;a href=&quot;https://book.pythontips.com/&quot;&gt;Intermediate Python&lt;/a&gt; fame publish his second book, &lt;a href=&quot;https://feld.to/ppp&quot;&gt;Practical Python Projects&lt;/a&gt;! &lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://feld.to/ppp&quot;&gt;&lt;img src=&quot;https://daniel.feldroy.com/images/ppp-hero.png&quot; alt=&quot;Practical Python Projects&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Practical Python Projects contains a dozen bite-sized weekend-length projects in 325+ pages where Yasoob explores concepts and then codes out solutions. In addition to showing you how he researched each project, he discusses how to change and extend them. This is important because some of the APIs he explores change periodically. This makes the book interesting because it means everyone's experience with it is unique.&lt;/p&gt;

&lt;p&gt;I've been coding in Python for 15 years now, yet I've learned some really useful things from Practical Python Projects. For me, the JPEG encoding project alone has been really fun to explore. Speaking of projects, here they are:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;FIFA World Cup Twilio Bot&lt;/li&gt;
&lt;li&gt;Making a Reddit + Facebook Messenger Bot&lt;/li&gt;
&lt;li&gt;Scraping Steam Using lxml&lt;/li&gt;
&lt;li&gt;Automatic Invoice Generation&lt;/li&gt;
&lt;li&gt;Article Summarization &amp;amp; Automated Image Generation&lt;/li&gt;
&lt;li&gt;Cinema Pre-show Generator&lt;/li&gt;
&lt;li&gt;Understanding and Decoding a JPEG Image using Python (my favorite!)&lt;/li&gt;
&lt;li&gt;Full Page Scroll Animation Video&lt;/li&gt;
&lt;li&gt;Visualizing Server Locations&lt;/li&gt;
&lt;li&gt;Making a TUI Email Client&lt;/li&gt;
&lt;li&gt;A Music/Video GUI Downloader&lt;/li&gt;
&lt;li&gt;Deploying Flask to Production&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;If you're interested in buying &lt;a href=&quot;https://feld.to/ppp&quot;&gt;Practical Python Projects&lt;/a&gt; or &lt;a href=&quot;https://www.feldroy.com/products/practical-python-projects#faq&quot;&gt;want to know more&lt;/a&gt;, the first 25 people to use code &lt;strong&gt;ppp-pydanny-blog&lt;/strong&gt; for it on &lt;a href=&quot;https://feldroy.com&quot;&gt;feldroy.com&lt;/a&gt; will get 15% off. &lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://feld.to/ppp&quot;&gt;&lt;img src=&quot;https://daniel.feldroy.com/images/ppp-cover.png&quot; alt=&quot;Practical Python Projects&quot; /&gt;&lt;/a&gt;&lt;/p&gt;</description>
	<pubDate>Fri, 21 Aug 2020 23:45:00 +0000</pubDate>
</item>
<item>
	<title>Python Insider: Python 3.5.10rc1 is now available</title>
	<guid>http://feedproxy.google.com/~r/PythonInsider/~3/W5AUa26PlDY/python-3510rc1-is-now-available.html</guid>
	<link>http://feedproxy.google.com/~r/PythonInsider/~3/W5AUa26PlDY/python-3510rc1-is-now-available.html</link>
	<description>&lt;p&gt;Python 3.5.10rc1 is now available.&lt;/p&gt;&lt;p&gt;&lt;a href=&quot;https://www.python.org/downloads/release/python-3510rc1/&quot;&gt;You can download it here.&lt;/a&gt;&lt;br /&gt;&lt;/p&gt;&lt;div class=&quot;feedflare&quot;&gt;
&lt;a href=&quot;http://feeds.feedburner.com/~ff/PythonInsider?a=W5AUa26PlDY:rzaNn8iBhY4:yIl2AUoC8zA&quot;&gt;&lt;img src=&quot;http://feeds.feedburner.com/~ff/PythonInsider?d=yIl2AUoC8zA&quot; border=&quot;0&quot; /&gt;&lt;/a&gt; &lt;a href=&quot;http://feeds.feedburner.com/~ff/PythonInsider?a=W5AUa26PlDY:rzaNn8iBhY4:-BTjWOF_DHI&quot;&gt;&lt;img src=&quot;http://feeds.feedburner.com/~ff/PythonInsider?i=W5AUa26PlDY:rzaNn8iBhY4:-BTjWOF_DHI&quot; border=&quot;0&quot; /&gt;&lt;/a&gt; &lt;a href=&quot;http://feeds.feedburner.com/~ff/PythonInsider?a=W5AUa26PlDY:rzaNn8iBhY4:F7zBnMyn0Lo&quot;&gt;&lt;img src=&quot;http://feeds.feedburner.com/~ff/PythonInsider?i=W5AUa26PlDY:rzaNn8iBhY4:F7zBnMyn0Lo&quot; border=&quot;0&quot; /&gt;&lt;/a&gt; &lt;a href=&quot;http://feeds.feedburner.com/~ff/PythonInsider?a=W5AUa26PlDY:rzaNn8iBhY4:V_sGLiPBpWU&quot;&gt;&lt;img src=&quot;http://feeds.feedburner.com/~ff/PythonInsider?i=W5AUa26PlDY:rzaNn8iBhY4:V_sGLiPBpWU&quot; border=&quot;0&quot; /&gt;&lt;/a&gt; &lt;a href=&quot;http://feeds.feedburner.com/~ff/PythonInsider?a=W5AUa26PlDY:rzaNn8iBhY4:qj6IDK7rITs&quot;&gt;&lt;img src=&quot;http://feeds.feedburner.com/~ff/PythonInsider?d=qj6IDK7rITs&quot; border=&quot;0&quot; /&gt;&lt;/a&gt;
&lt;/div&gt;&lt;img src=&quot;http://feeds.feedburner.com/~r/PythonInsider/~4/W5AUa26PlDY&quot; height=&quot;1&quot; width=&quot;1&quot; alt=&quot;&quot; /&gt;</description>
	<pubDate>Fri, 21 Aug 2020 23:25:40 +0000</pubDate>
</item>

</channel>
</rss>
